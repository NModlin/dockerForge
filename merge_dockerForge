# DockerForge Image Merge and Docker Hub Push Plan

This document outlines the steps to combine the separate DockerForge images (`dockerforge` and `dockerforge-web`) into a single unified Docker image and push it to Docker Hub under the username `natedog115`.

## Step 1: Create the Required Files

### 1.1 Create Dockerfile.combined
Create a new file called `Dockerfile.combined` with the multi-stage build that combines both applications:

```dockerfile
# Stage 1: Build Vue.js frontend
FROM node:18-alpine AS frontend-builder
WORKDIR /app/frontend
COPY src/web/frontend/package*.json ./
RUN npm install
COPY src/web/frontend/ ./
RUN npm run build

# Stage 2: Python dependencies and application build
FROM python:3.10-slim AS builder
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install main app dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install web API dependencies
COPY src/web/api/requirements.txt web-requirements.txt
RUN pip install --no-cache-dir -r web-requirements.txt

# Build the main package
COPY . .
RUN pip install --no-cache-dir -e .

# Final stage
FROM python:3.10-slim
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl supervisor \
    && rm -rf /var/lib/apt/lists/*

# Copy built packages from builder stage
COPY --from=builder /app /app
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist /app/static

# Create necessary directories and volumes
RUN mkdir -p /app/data /app/config /app/media /app/logs
VOLUME /app/data
VOLUME /app/config

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DOCKERFORGE_CONFIG_PATH=/app/config/dockerforge.yaml \
    DOCKERFORGE_DATA_DIR=/app/data

# Expose both ports
EXPOSE 8080 54321

# Copy supervisor configuration to manage multiple processes
COPY docker-entrypoint.sh /docker-entrypoint.sh
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN chmod +x /docker-entrypoint.sh

# Set entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]

# Default command (can be overridden)
CMD ["all"]

# Metadata
LABEL maintainer="DockerForge Team <info@dockerforge.example.com>" \
      version="0.1.0" \
      description="DockerForge - All-in-one Docker management tool with web UI"
```

### 1.2 Create supervisord.conf
Create a file named `supervisord.conf` to manage both processes:

```ini
[supervisord]
nodaemon=true
user=root

[program:dockerforge]
command=python -m src.cli serve
directory=/app
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:web]
command=uvicorn api.main:app --host 0.0.0.0 --port 54321
directory=/app
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
```

### 1.3 Create docker-entrypoint.sh
Create a script named `docker-entrypoint.sh` that manages which processes to start:

```bash
#!/bin/bash
set -e

# Function to start supervisor with all services
start_all() {
  exec supervisord -c /etc/supervisor/conf.d/supervisord.conf
}

# Function to start just the main dockerforge CLI
start_cli() {
  exec python -m src.cli "$@"
}

# Function to start just the web service
start_web() {
  exec uvicorn api.main:app --host 0.0.0.0 --port 54321
}

# Parse argument and decide what to start
case "$1" in
  cli)
    shift
    start_cli "$@"
    ;;
  web)
    start_web
    ;;
  all|"")
    start_all
    ;;
  *)
    # Default to CLI with all arguments
    start_cli "$@"
    ;;
esac
```

### 1.4 Update docker-compose.yml (Optional)
You can update your docker-compose.yml to use the new combined image:

```yaml
services:
  dockerforge:
    build:
      context: .
      dockerfile: Dockerfile.combined
    image: natedog115/dockerforge:latest
    container_name: dockerforge
    restart: unless-stopped
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./media:/app/media
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKERFORGE_CONFIG_PATH=/app/config/dockerforge.yaml
      - DOCKERFORGE_DATA_DIR=/app/data
      - OLLAMA_API_HOST=http://ollama:11435
      - DATABASE_URL=postgresql://dockerforge:dockerforge@db:5432/dockerforge
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8080:8080"
      - "54321:54321"
    depends_on:
      - ollama
      - db
      - redis
    networks:
      - dockerforge-network
    command: ["all"]  # Run both services

  # Other services remain the same
  # ...
```

## Step 2: Build and Test the Combined Image

### 2.1 Build the combined image
```bash
docker build -t natedog115/dockerforge:latest -f Dockerfile.combined .
```

### 2.2 Test the different run modes
```bash
# Test CLI mode
docker run --rm natedog115/dockerforge cli --help

# Test web UI (in a separate terminal)
docker run --rm -p 54321:54321 natedog115/dockerforge web

# Test combined mode (in a separate terminal)
docker run --rm -p 8080:8080 -p 54321:54321 natedog115/dockerforge all
```

### 2.3 Test with docker-compose
If you updated your docker-compose.yml:
```bash
docker-compose down
docker-compose up -d
```

### 2.4 Verify everything works as expected
- Check that the CLI works: `docker exec dockerforge python -m src.cli --help`
- Check that the web UI works by visiting: http://localhost:54321
- Ensure all features are functional

## Step 3: Push to Docker Hub

### 3.1 Log in to Docker Hub
```bash
docker login -u natedog115
# Enter your password when prompted
```

### 3.2 Push the image to Docker Hub
```bash
docker push natedog115/dockerforge:latest
```

### 3.3 Add version tags (optional but recommended)
```bash
# Tag with version number
docker tag natedog115/dockerforge:latest natedog115/dockerforge:0.1.0

# Push version tag
docker push natedog115/dockerforge:0.1.0
```

## Step 4: Cleanup and Documentation

### 4.1 Update README.md with new usage instructions
Add a section explaining the combined image capabilities:
- How to run in CLI-only mode
- How to run in web-only mode
- How to run both services
- How to pull from Docker Hub

### 4.2 Clean up old images (optional)
```bash
docker rmi dockerforge:latest dockerforge-web:latest
```

### 4.3 Consider setting up automated builds (future enhancement)
- GitHub Actions or Docker Hub automated builds

## Benefits of This Approach

1. **Simplified Deployment**: One image to manage instead of two
2. **Flexible Runtime Options**:
   - `docker run natedog115/dockerforge cli` (runs just the CLI)
   - `docker run natedog115/dockerforge web` (runs just the web UI)
   - `docker run natedog115/dockerforge all` (runs both)
3. **Reduced Resource Usage**: Shared base image and dependencies
4. **Easier Maintenance**: Only one Dockerfile to manage
