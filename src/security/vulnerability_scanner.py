"""
Vulnerability scanner module for DockerForge.

This module provides functionality to scan Docker images for vulnerabilities
using Trivy.
"""

import os
import json
import subprocess
import tempfile
import logging
from typing import Dict, List, Optional, Any, Union
from datetime import datetime

from src.utils.logging_manager import get_logger
from src.docker.connection_manager import get_docker_client
from src.config.config_manager import get_config

# Set up logging
logger = get_logger("security.vulnerability_scanner")


class VulnerabilityScanner:
    """
    Vulnerability scanner for Docker images using Trivy.
    """
    
    def __init__(self):
        """Initialize the vulnerability scanner."""
        self.docker_client = get_docker_client()
        self.config = get_config("security.vulnerability_scanner", {})
        self.trivy_path = self.config.get("trivy_path", "trivy")
        self.cache_dir = self.config.get("cache_dir", os.path.expanduser("~/.dockerforge/trivy-cache"))
        
        # Create cache directory if it doesn't exist
        os.makedirs(self.cache_dir, exist_ok=True)
    
    def check_trivy_installed(self) -> bool:
        """
        Check if Trivy is installed.
        
        Returns:
            bool: True if Trivy is installed, False otherwise.
        """
        try:
            result = subprocess.run(
                [self.trivy_path, "--version"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                check=False
            )
            return result.returncode == 0
        except FileNotFoundError:
            return False
    
    def install_trivy(self) -> bool:
        """
        Install Trivy if not already installed.
        
        Returns:
            bool: True if installation was successful, False otherwise.
        """
        logger.info("Installing Trivy...")
        
        try:
            # Detect platform
            import platform
            system = platform.system().lower()
            
            if system == "linux":
                # Install Trivy on Linux
                result = subprocess.run(
                    [
                        "bash", "-c",
                        "curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin"
                    ],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    check=False
                )
            elif system == "darwin":
                # Install Trivy on macOS
                result = subprocess.run(
                    ["brew", "install", "aquasecurity/trivy/trivy"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    check=False
                )
            elif system == "windows":
                # Install Trivy on Windows
                result = subprocess.run(
                    ["powershell", "-Command", "scoop install trivy"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    check=False
                )
            else:
                logger.error(f"Unsupported platform: {system}")
                return False
            
            if result.returncode != 0:
                logger.error(f"Failed to install Trivy: {result.stderr}")
                return False
            
            logger.info("Trivy installed successfully")
            return True
        
        except Exception as e:
            logger.error(f"Error installing Trivy: {str(e)}")
            return False
    
    def scan_image(
        self,
        image_name: str,
        severity: Optional[List[str]] = None,
        output_format: str = "json",
        timeout: int = 300,
        ignore_unfixed: bool = False,
        vuln_type: str = "os,library",
        scan_type: str = "image"
    ) -> Dict[str, Any]:
        """
        Scan a Docker image for vulnerabilities.
        
        Args:
            image_name: Name of the Docker image to scan.
            severity: List of severity levels to include (e.g., ["HIGH", "CRITICAL"]).
            output_format: Output format (json, table).
            timeout: Timeout for the scan in seconds.
            ignore_unfixed: Whether to ignore unfixed vulnerabilities.
            vuln_type: Type of vulnerabilities to scan for.
            scan_type: Type of scan to perform.
        
        Returns:
            Dict containing the scan results.
        """
        logger.info(f"Scanning image {image_name} for vulnerabilities")
        
        # Check if Trivy is installed
        if not self.check_trivy_installed():
            logger.warning("Trivy not found, attempting to install")
            if not self.install_trivy():
                raise RuntimeError("Failed to install Trivy. Please install it manually.")
        
        # Prepare command
        cmd = [self.trivy_path]
        
        # Add scan type
        cmd.append(scan_type)
        
        # Add severity filter if provided
        if severity:
            cmd.extend(["--severity", ",".join(severity)])
        
        # Add output format
        cmd.extend(["--format", output_format])
        
        # Add cache directory
        cmd.extend(["--cache-dir", self.cache_dir])
        
        # Add vulnerability type
        cmd.extend(["--vuln-type", vuln_type])
        
        # Add ignore unfixed flag if requested
        if ignore_unfixed:
            cmd.append("--ignore-unfixed")
        
        # Add image name
        cmd.append(image_name)
        
        # Create temporary file for output
        with tempfile.NamedTemporaryFile(mode='w+', delete=False) as temp_file:
            temp_file_path = temp_file.name
        
        try:
            # Run Trivy scan
            logger.debug(f"Running command: {' '.join(cmd)}")
            result = subprocess.run(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=timeout,
                check=False
            )
            
            # Check for errors
            if result.returncode != 0 and result.returncode != 1:  # Trivy returns 1 when vulnerabilities are found
                logger.error(f"Trivy scan failed: {result.stderr}")
                return {
                    "success": False,
                    "error": result.stderr,
                    "image": image_name,
                    "timestamp": datetime.now().isoformat()
                }
            
            # Parse output
            if output_format == "json":
                try:
                    scan_result = json.loads(result.stdout)
                    scan_result["success"] = True
                    scan_result["image"] = image_name
                    scan_result["timestamp"] = datetime.now().isoformat()
                    return scan_result
                except json.JSONDecodeError as e:
                    logger.error(f"Failed to parse Trivy output: {str(e)}")
                    return {
                        "success": False,
                        "error": f"Failed to parse Trivy output: {str(e)}",
                        "image": image_name,
                        "timestamp": datetime.now().isoformat()
                    }
            else:
                # Return text output
                return {
                    "success": True,
                    "output": result.stdout,
                    "image": image_name,
                    "timestamp": datetime.now().isoformat()
                }
        
        except subprocess.TimeoutExpired:
            logger.error(f"Trivy scan timed out after {timeout} seconds")
            return {
                "success": False,
                "error": f"Scan timed out after {timeout} seconds",
                "image": image_name,
                "timestamp": datetime.now().isoformat()
            }
        
        except Exception as e:
            logger.error(f"Error scanning image: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "image": image_name,
                "timestamp": datetime.now().isoformat()
            }
        
        finally:
            # Clean up temporary file
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
    
    def scan_all_images(
        self,
        severity: Optional[List[str]] = None,
        output_format: str = "json",
        timeout: int = 300,
        ignore_unfixed: bool = False
    ) -> Dict[str, Dict[str, Any]]:
        """
        Scan all Docker images for vulnerabilities.
        
        Args:
            severity: List of severity levels to include (e.g., ["HIGH", "CRITICAL"]).
            output_format: Output format (json, table).
            timeout: Timeout for the scan in seconds.
            ignore_unfixed: Whether to ignore unfixed vulnerabilities.
        
        Returns:
            Dict mapping image IDs to scan results.
        """
        logger.info("Scanning all Docker images for vulnerabilities")
        
        # Get all images
        images = self.docker_client.images.list()
        
        # Scan each image
        results = {}
        for image in images:
            # Get image ID and tags
            image_id = image.id.split(":")[-1][:12]
            
            # Use the first tag if available, otherwise use the image ID
            image_name = image.tags[0] if image.tags else image_id
            
            # Scan image
            result = self.scan_image(
                image_name=image_name,
                severity=severity,
                output_format=output_format,
                timeout=timeout,
                ignore_unfixed=ignore_unfixed
            )
            
            # Store result
            results[image_id] = result
        
        return results
    
    def get_vulnerability_summary(self, scan_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a summary of vulnerabilities from a scan result.
        
        Args:
            scan_result: Scan result from scan_image().
        
        Returns:
            Dict containing vulnerability summary.
        """
        if not scan_result.get("success", False):
            return {
                "success": False,
                "error": scan_result.get("error", "Unknown error"),
                "image": scan_result.get("image", "unknown"),
                "timestamp": scan_result.get("timestamp", datetime.now().isoformat())
            }
        
        # Initialize summary
        summary = {
            "success": True,
            "image": scan_result.get("image", "unknown"),
            "timestamp": scan_result.get("timestamp", datetime.now().isoformat()),
            "total_vulnerabilities": 0,
            "severity_counts": {
                "CRITICAL": 0,
                "HIGH": 0,
                "MEDIUM": 0,
                "LOW": 0,
                "UNKNOWN": 0
            },
            "fixable_vulnerabilities": 0,
            "top_vulnerabilities": []
        }
        
        # Process results
        if "Results" in scan_result:
            for result in scan_result["Results"]:
                if "Vulnerabilities" in result:
                    vulnerabilities = result["Vulnerabilities"]
                    
                    # Count vulnerabilities
                    summary["total_vulnerabilities"] += len(vulnerabilities)
                    
                    # Count by severity
                    for vuln in vulnerabilities:
                        severity = vuln.get("Severity", "UNKNOWN").upper()
                        if severity in summary["severity_counts"]:
                            summary["severity_counts"][severity] += 1
                        
                        # Count fixable vulnerabilities
                        if vuln.get("FixedVersion"):
                            summary["fixable_vulnerabilities"] += 1
                    
                    # Get top vulnerabilities (CRITICAL and HIGH)
                    top_vulns = [v for v in vulnerabilities if v.get("Severity", "").upper() in ["CRITICAL", "HIGH"]]
                    top_vulns = sorted(top_vulns, key=lambda v: v.get("CVSS", {}).get("V3Score", 0), reverse=True)
                    
                    for vuln in top_vulns[:10]:  # Get top 10
                        summary["top_vulnerabilities"].append({
                            "id": vuln.get("VulnerabilityID", "unknown"),
                            "severity": vuln.get("Severity", "unknown"),
                            "package": vuln.get("PkgName", "unknown"),
                            "installed_version": vuln.get("InstalledVersion", "unknown"),
                            "fixed_version": vuln.get("FixedVersion", ""),
                            "title": vuln.get("Title", ""),
                            "description": vuln.get("Description", ""),
                            "cvss_score": vuln.get("CVSS", {}).get("V3Score", 0)
                        })
        
        return summary


# Singleton instance
_vulnerability_scanner = None


def get_vulnerability_scanner() -> VulnerabilityScanner:
    """
    Get the vulnerability scanner instance.
    
    Returns:
        VulnerabilityScanner: The vulnerability scanner instance.
    """
    global _vulnerability_scanner
    if _vulnerability_scanner is None:
        _vulnerability_scanner = VulnerabilityScanner()
    return _vulnerability_scanner
