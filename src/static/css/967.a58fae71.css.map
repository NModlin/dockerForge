{"version":3,"file":"css/967.a58fae71.css","mappings":"AA82BA,uCACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/monitoring/MonitoringDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"monitoring-dashboard\">\n    <h1 class=\"text-h4 mb-4\">Monitoring Dashboard</h1>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Dashboard Content -->\n    <template v-else>\n      <!-- System Overview -->\n      <v-row>\n        <v-col cols=\"12\" md=\"3\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left color=\"primary\">mdi-cpu-64-bit</v-icon>\n              CPU Usage\n            </v-card-title>\n            <v-card-text class=\"text-center\">\n              <v-progress-circular\n                :rotate=\"-90\"\n                :size=\"100\"\n                :width=\"15\"\n                :value=\"systemMetrics.cpu_usage\"\n                :color=\"getResourceColor(systemMetrics.cpu_usage)\"\n              >\n                <span class=\"text-h5\">{{ systemMetrics.cpu_usage }}%</span>\n              </v-progress-circular>\n              <div class=\"mt-2\">\n                <small>{{ systemMetrics.cpu_cores }} Cores</small>\n              </div>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"3\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left color=\"green\">mdi-memory</v-icon>\n              Memory Usage\n            </v-card-title>\n            <v-card-text class=\"text-center\">\n              <v-progress-circular\n                :rotate=\"-90\"\n                :size=\"100\"\n                :width=\"15\"\n                :value=\"systemMetrics.memory_usage_percent\"\n                :color=\"getResourceColor(systemMetrics.memory_usage_percent)\"\n              >\n                <span class=\"text-h5\">{{ systemMetrics.memory_usage_percent }}%</span>\n              </v-progress-circular>\n              <div class=\"mt-2\">\n                <small>{{ formatSize(systemMetrics.memory_used) }} / {{ formatSize(systemMetrics.memory_total) }}</small>\n              </div>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"3\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left color=\"blue\">mdi-harddisk</v-icon>\n              Disk Usage\n            </v-card-title>\n            <v-card-text class=\"text-center\">\n              <v-progress-circular\n                :rotate=\"-90\"\n                :size=\"100\"\n                :width=\"15\"\n                :value=\"systemMetrics.disk_usage_percent\"\n                :color=\"getResourceColor(systemMetrics.disk_usage_percent)\"\n              >\n                <span class=\"text-h5\">{{ systemMetrics.disk_usage_percent }}%</span>\n              </v-progress-circular>\n              <div class=\"mt-2\">\n                <small>{{ formatSize(systemMetrics.disk_used) }} / {{ formatSize(systemMetrics.disk_total) }}</small>\n              </div>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"3\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left color=\"purple\">mdi-docker</v-icon>\n              Docker Stats\n            </v-card-title>\n            <v-card-text>\n              <v-row>\n                <v-col cols=\"6\" class=\"text-center\">\n                  <div class=\"text-h5\">{{ containerStats.running }}</div>\n                  <div class=\"text-subtitle-1 success--text\">Running</div>\n                </v-col>\n                <v-col cols=\"6\" class=\"text-center\">\n                  <div class=\"text-h5\">{{ containerStats.total }}</div>\n                  <div class=\"text-subtitle-1\">Total</div>\n                </v-col>\n              </v-row>\n              <v-divider class=\"my-2\"></v-divider>\n              <v-row>\n                <v-col cols=\"6\" class=\"text-center\">\n                  <div class=\"text-h5\">{{ imageStats.count }}</div>\n                  <div class=\"text-subtitle-1\">Images</div>\n                </v-col>\n                <v-col cols=\"6\" class=\"text-center\">\n                  <div class=\"text-h5\">{{ volumeStats.count }}</div>\n                  <div class=\"text-subtitle-1\">Volumes</div>\n                </v-col>\n              </v-row>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Resource Usage Charts -->\n      <v-row>\n        <v-col cols=\"12\" md=\"6\">\n          <v-card class=\"mb-4\">\n            <v-card-title>\n              CPU Usage History\n              <v-spacer></v-spacer>\n              <v-btn-toggle v-model=\"cpuTimeRange\" mandatory>\n                <v-btn small value=\"1h\">1h</v-btn>\n                <v-btn small value=\"6h\">6h</v-btn>\n                <v-btn small value=\"24h\">24h</v-btn>\n                <v-btn small value=\"7d\">7d</v-btn>\n              </v-btn-toggle>\n            </v-card-title>\n            <v-card-text>\n              <canvas id=\"cpuChart\" height=\"250\"></canvas>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"6\">\n          <v-card class=\"mb-4\">\n            <v-card-title>\n              Memory Usage History\n              <v-spacer></v-spacer>\n              <v-btn-toggle v-model=\"memoryTimeRange\" mandatory>\n                <v-btn small value=\"1h\">1h</v-btn>\n                <v-btn small value=\"6h\">6h</v-btn>\n                <v-btn small value=\"24h\">24h</v-btn>\n                <v-btn small value=\"7d\">7d</v-btn>\n              </v-btn-toggle>\n            </v-card-title>\n            <v-card-text>\n              <canvas id=\"memoryChart\" height=\"250\"></canvas>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Container Resource Usage -->\n      <h2 class=\"text-h5 mb-3\">Container Resource Usage</h2>\n      <v-card class=\"mb-4\">\n        <v-data-table\n          :headers=\"containerHeaders\"\n          :items=\"containerResources\"\n          :items-per-page=\"5\"\n          :sort-by=\"['cpu_percent']\"\n          :sort-desc=\"[true]\"\n          class=\"elevation-1\"\n        >\n          <!-- Name Column -->\n          <template v-slot:item.name=\"{ item }\">\n            <router-link :to=\"`/containers/${item.id}`\" class=\"text-decoration-none\">\n              {{ item.name }}\n            </router-link>\n          </template>\n\n          <!-- CPU Column -->\n          <template v-slot:item.cpu_percent=\"{ item }\">\n            <v-progress-linear\n              :value=\"item.cpu_percent\"\n              height=\"20\"\n              :color=\"getResourceColor(item.cpu_percent)\"\n              striped\n            >\n              <template v-slot:default>\n                <strong>{{ item.cpu_percent.toFixed(1) }}%</strong>\n              </template>\n            </v-progress-linear>\n          </template>\n\n          <!-- Memory Column -->\n          <template v-slot:item.memory_percent=\"{ item }\">\n            <v-progress-linear\n              :value=\"item.memory_percent\"\n              height=\"20\"\n              :color=\"getResourceColor(item.memory_percent)\"\n              striped\n            >\n              <template v-slot:default>\n                <strong>{{ item.memory_percent.toFixed(1) }}%</strong>\n              </template>\n            </v-progress-linear>\n            <div class=\"text-caption\">\n              {{ formatSize(item.memory_usage) }}\n            </div>\n          </template>\n\n          <!-- Network Column -->\n          <template v-slot:item.network=\"{ item }\">\n            <div>\n              <v-icon small color=\"success\">mdi-arrow-down</v-icon>\n              {{ formatSize(item.network_rx) }}/s\n            </div>\n            <div>\n              <v-icon small color=\"info\">mdi-arrow-up</v-icon>\n              {{ formatSize(item.network_tx) }}/s\n            </div>\n          </template>\n\n          <!-- Disk Column -->\n          <template v-slot:item.disk=\"{ item }\">\n            <div>\n              <v-icon small color=\"success\">mdi-arrow-down</v-icon>\n              {{ formatSize(item.disk_read) }}/s\n            </div>\n            <div>\n              <v-icon small color=\"info\">mdi-arrow-up</v-icon>\n              {{ formatSize(item.disk_write) }}/s\n            </div>\n          </template>\n\n          <!-- Actions Column -->\n          <template v-slot:item.actions=\"{ item }\">\n            <v-btn\n              icon\n              small\n              :to=\"`/containers/${item.id}`\"\n              title=\"View Details\"\n            >\n              <v-icon small>mdi-eye</v-icon>\n            </v-btn>\n            <v-btn\n              icon\n              small\n              @click=\"showContainerMetrics(item)\"\n              title=\"View Metrics\"\n            >\n              <v-icon small>mdi-chart-line</v-icon>\n            </v-btn>\n          </template>\n        </v-data-table>\n      </v-card>\n\n      <!-- Alerts and Anomalies -->\n      <h2 class=\"text-h5 mb-3\">Alerts and Anomalies</h2>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-expansion-panels>\n            <v-expansion-panel\n              v-for=\"(alert, i) in alerts\"\n              :key=\"i\"\n            >\n              <v-expansion-panel-header>\n                <div class=\"d-flex align-center\">\n                  <v-icon\n                    :color=\"getAlertSeverityColor(alert.severity)\"\n                    class=\"mr-2\"\n                  >\n                    mdi-alert-circle\n                  </v-icon>\n                  <span>{{ alert.title }}</span>\n                  <v-chip\n                    class=\"ml-2\"\n                    x-small\n                    :color=\"getAlertSeverityColor(alert.severity)\"\n                    text-color=\"white\"\n                  >\n                    {{ alert.severity }}\n                  </v-chip>\n                  <v-spacer></v-spacer>\n                  <span class=\"text-caption\">{{ formatDate(alert.timestamp) }}</span>\n                </div>\n              </v-expansion-panel-header>\n              <v-expansion-panel-content>\n                <p>{{ alert.description }}</p>\n                <div v-if=\"alert.resource\">\n                  <strong>Resource:</strong> {{ alert.resource.name }} ({{ alert.resource.type }})\n                </div>\n                <div v-if=\"alert.metrics && alert.metrics.length > 0\">\n                  <strong>Metrics:</strong>\n                  <ul>\n                    <li v-for=\"(metric, j) in alert.metrics\" :key=\"j\">\n                      {{ metric.name }}: {{ metric.value }} {{ metric.unit }}\n                    </li>\n                  </ul>\n                </div>\n                <div class=\"d-flex mt-2\">\n                  <v-btn\n                    color=\"primary\"\n                    text\n                    small\n                    @click=\"acknowledgeAlert(alert)\"\n                    v-if=\"!alert.acknowledged\"\n                  >\n                    <v-icon left small>mdi-check</v-icon>\n                    Acknowledge\n                  </v-btn>\n                  <v-btn\n                    color=\"success\"\n                    text\n                    small\n                    @click=\"resolveAlert(alert)\"\n                    v-if=\"!alert.resolved\"\n                  >\n                    <v-icon left small>mdi-check-all</v-icon>\n                    Resolve\n                  </v-btn>\n                  <v-btn\n                    color=\"info\"\n                    text\n                    small\n                    :to=\"getResourceLink(alert.resource)\"\n                    v-if=\"alert.resource\"\n                  >\n                    <v-icon left small>mdi-eye</v-icon>\n                    View Resource\n                  </v-btn>\n                </div>\n              </v-expansion-panel-content>\n            </v-expansion-panel>\n          </v-expansion-panels>\n\n          <v-card v-if=\"alerts.length === 0\" class=\"text-center pa-5\">\n            <v-icon size=\"64\" color=\"success\">mdi-check-circle</v-icon>\n            <h3 class=\"text-h5 mt-4\">No active alerts</h3>\n            <p class=\"text-body-1 mt-2\">\n              All systems are operating normally\n            </p>\n          </v-card>\n        </v-col>\n      </v-row>\n    </template>\n\n    <!-- Container Metrics Dialog -->\n    <v-dialog v-model=\"containerMetricsDialog\" max-width=\"800\">\n      <v-card>\n        <v-card-title class=\"headline\">\n          {{ selectedContainer?.name }} Metrics\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"containerMetricsDialog = false\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text>\n          <v-tabs v-model=\"activeMetricTab\">\n            <v-tab>CPU</v-tab>\n            <v-tab>Memory</v-tab>\n            <v-tab>Network</v-tab>\n            <v-tab>Disk</v-tab>\n          </v-tabs>\n          <v-tabs-items v-model=\"activeMetricTab\">\n            <v-tab-item>\n              <div class=\"pa-4\">\n                <canvas id=\"containerCpuChart\" height=\"250\"></canvas>\n              </div>\n            </v-tab-item>\n            <v-tab-item>\n              <div class=\"pa-4\">\n                <canvas id=\"containerMemoryChart\" height=\"250\"></canvas>\n              </div>\n            </v-tab-item>\n            <v-tab-item>\n              <div class=\"pa-4\">\n                <canvas id=\"containerNetworkChart\" height=\"250\"></canvas>\n              </div>\n            </v-tab-item>\n            <v-tab-item>\n              <div class=\"pa-4\">\n                <canvas id=\"containerDiskChart\" height=\"250\"></canvas>\n              </div>\n            </v-tab-item>\n          </v-tabs-items>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"containerMetricsDialog = false\">\n            Close\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n// In a real implementation, you would import Chart.js\n// import Chart from 'chart.js';\n\nexport default {\n  name: 'MonitoringDashboard',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      refreshInterval: null,\n      systemMetrics: {\n        cpu_usage: 0,\n        cpu_cores: 0,\n        memory_usage_percent: 0,\n        memory_used: 0,\n        memory_total: 0,\n        disk_usage_percent: 0,\n        disk_used: 0,\n        disk_total: 0,\n      },\n      containerStats: {\n        running: 0,\n        total: 0,\n      },\n      imageStats: {\n        count: 0,\n      },\n      volumeStats: {\n        count: 0,\n      },\n      cpuTimeRange: '1h',\n      memoryTimeRange: '1h',\n      containerHeaders: [\n        { text: 'Name', value: 'name', sortable: true },\n        { text: 'CPU', value: 'cpu_percent', sortable: true },\n        { text: 'Memory', value: 'memory_percent', sortable: true },\n        { text: 'Network I/O', value: 'network', sortable: false },\n        { text: 'Disk I/O', value: 'disk', sortable: false },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      containerResources: [],\n      alerts: [],\n      containerMetricsDialog: false,\n      selectedContainer: null,\n      activeMetricTab: 0,\n      charts: {\n        cpu: null,\n        memory: null,\n        containerCpu: null,\n        containerMemory: null,\n        containerNetwork: null,\n        containerDisk: null,\n      },\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  watch: {\n    cpuTimeRange() {\n      this.updateCpuChart();\n    },\n    memoryTimeRange() {\n      this.updateMemoryChart();\n    },\n  },\n  created() {\n    this.fetchMonitoringData();\n  },\n  mounted() {\n    // Set up auto-refresh every 30 seconds\n    this.refreshInterval = setInterval(() => {\n      this.fetchMonitoringData(false);\n    }, 30000);\n  },\n  beforeDestroy() {\n    // Clear the refresh interval when component is destroyed\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  },\n  methods: {\n    async fetchMonitoringData(showLoading = true) {\n      if (showLoading) {\n        this.loading = true;\n      }\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get('/api/monitoring/dashboard', {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.systemMetrics = response.data.system_metrics;\n        // this.containerStats = response.data.container_stats;\n        // this.imageStats = response.data.image_stats;\n        // this.volumeStats = response.data.volume_stats;\n        // this.containerResources = response.data.container_resources;\n        // this.alerts = response.data.alerts;\n        \n        // Mock data for development\n        setTimeout(() => {\n          this.systemMetrics = {\n            cpu_usage: 35.2,\n            cpu_cores: 8,\n            memory_usage_percent: 42.7,\n            memory_used: 1024 * 1024 * 1024 * 6.8, // 6.8 GB\n            memory_total: 1024 * 1024 * 1024 * 16, // 16 GB\n            disk_usage_percent: 68.3,\n            disk_used: 1024 * 1024 * 1024 * 205, // 205 GB\n            disk_total: 1024 * 1024 * 1024 * 300, // 300 GB\n          };\n          \n          this.containerStats = {\n            running: 7,\n            total: 12,\n          };\n          \n          this.imageStats = {\n            count: 23,\n          };\n          \n          this.volumeStats = {\n            count: 8,\n          };\n          \n          this.containerResources = [\n            {\n              id: 'c1',\n              name: 'web-server',\n              cpu_percent: 12.5,\n              memory_percent: 8.2,\n              memory_usage: 1024 * 1024 * 256, // 256 MB\n              network_rx: 1024 * 1024 * 1.2, // 1.2 MB/s\n              network_tx: 1024 * 1024 * 3.5, // 3.5 MB/s\n              disk_read: 1024 * 1024 * 0.5, // 0.5 MB/s\n              disk_write: 1024 * 1024 * 0.2, // 0.2 MB/s\n            },\n            {\n              id: 'c2',\n              name: 'api-service',\n              cpu_percent: 28.7,\n              memory_percent: 15.3,\n              memory_usage: 1024 * 1024 * 512, // 512 MB\n              network_rx: 1024 * 1024 * 2.8, // 2.8 MB/s\n              network_tx: 1024 * 1024 * 1.7, // 1.7 MB/s\n              disk_read: 1024 * 1024 * 0.3, // 0.3 MB/s\n              disk_write: 1024 * 1024 * 0.8, // 0.8 MB/s\n            },\n            {\n              id: 'c3',\n              name: 'database',\n              cpu_percent: 45.2,\n              memory_percent: 62.8,\n              memory_usage: 1024 * 1024 * 1024 * 2.5, // 2.5 GB\n              network_rx: 1024 * 1024 * 0.8, // 0.8 MB/s\n              network_tx: 1024 * 1024 * 0.6, // 0.6 MB/s\n              disk_read: 1024 * 1024 * 5.2, // 5.2 MB/s\n              disk_write: 1024 * 1024 * 3.1, // 3.1 MB/s\n            },\n            {\n              id: 'c4',\n              name: 'cache',\n              cpu_percent: 5.3,\n              memory_percent: 28.1,\n              memory_usage: 1024 * 1024 * 768, // 768 MB\n              network_rx: 1024 * 1024 * 4.5, // 4.5 MB/s\n              network_tx: 1024 * 1024 * 3.2, // 3.2 MB/s\n              disk_read: 1024 * 1024 * 0.1, // 0.1 MB/s\n              disk_write: 1024 * 1024 * 0.05, // 0.05 MB/s\n            },\n            {\n              id: 'c5',\n              name: 'worker',\n              cpu_percent: 78.9,\n              memory_percent: 42.6,\n              memory_usage: 1024 * 1024 * 896, // 896 MB\n              network_rx: 1024 * 1024 * 0.3, // 0.3 MB/s\n              network_tx: 1024 * 1024 * 0.2, // 0.2 MB/s\n              disk_read: 1024 * 1024 * 2.1, // 2.1 MB/s\n              disk_write: 1024 * 1024 * 1.8, // 1.8 MB/s\n            },\n          ];\n          \n          this.alerts = [\n            {\n              id: 'a1',\n              title: 'High CPU Usage',\n              description: 'Container \"worker\" is using excessive CPU resources (78.9%). This may indicate a performance issue or resource contention.',\n              severity: 'warning',\n              timestamp: '2025-03-17T05:45:00Z',\n              acknowledged: false,\n              resolved: false,\n              resource: {\n                type: 'container',\n                id: 'c5',\n                name: 'worker',\n              },\n              metrics: [\n                {\n                  name: 'CPU Usage',\n                  value: 78.9,\n                  unit: '%',\n                },\n              ],\n            },\n            {\n              id: 'a2',\n              title: 'Memory Leak Detected',\n              description: 'Container \"database\" shows a steady increase in memory usage over the past 6 hours, indicating a possible memory leak.',\n              severity: 'critical',\n              timestamp: '2025-03-17T04:30:00Z',\n              acknowledged: true,\n              resolved: false,\n              resource: {\n                type: 'container',\n                id: 'c3',\n                name: 'database',\n              },\n              metrics: [\n                {\n                  name: 'Memory Usage',\n                  value: 62.8,\n                  unit: '%',\n                },\n                {\n                  name: 'Memory Growth Rate',\n                  value: 5.2,\n                  unit: '%/hour',\n                },\n              ],\n            },\n            {\n              id: 'a3',\n              title: 'Disk Space Warning',\n              description: 'Host system is running low on disk space (68.3% used). Consider cleaning up unused images and volumes.',\n              severity: 'warning',\n              timestamp: '2025-03-17T03:15:00Z',\n              acknowledged: false,\n              resolved: false,\n              resource: {\n                type: 'host',\n                id: 'host',\n                name: 'Docker Host',\n              },\n              metrics: [\n                {\n                  name: 'Disk Usage',\n                  value: 68.3,\n                  unit: '%',\n                },\n              ],\n            },\n          ];\n          \n          this.loading = false;\n          \n          // Initialize charts after data is loaded\n          this.$nextTick(() => {\n            this.initCharts();\n          });\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load monitoring data. Please try again.';\n        this.loading = false;\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    formatSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      \n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      \n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    getResourceColor(percent) {\n      if (percent >= 90) {\n        return 'error';\n      } else if (percent >= 70) {\n        return 'warning';\n      } else if (percent >= 50) {\n        return 'info';\n      } else {\n        return 'success';\n      }\n    },\n    getAlertSeverityColor(severity) {\n      switch (severity) {\n        case 'critical':\n          return 'error';\n        case 'warning':\n          return 'warning';\n        case 'info':\n          return 'info';\n        default:\n          return 'grey';\n      }\n    },\n    getResourceLink(resource) {\n      if (!resource) return '#';\n      \n      switch (resource.type) {\n        case 'container':\n          return `/containers/${resource.id}`;\n        case 'image':\n          return `/images/${resource.id}`;\n        case 'volume':\n          return `/volumes/${resource.id}`;\n        case 'network':\n          return `/networks/${resource.id}`;\n        default:\n          return '#';\n      }\n    },\n    showContainerMetrics(container) {\n      this.selectedContainer = container;\n      this.containerMetricsDialog = true;\n      \n      // Initialize container charts after dialog is shown\n      this.$nextTick(() => {\n        this.initContainerCharts();\n      });\n    },\n    acknowledgeAlert(alert) {\n      // In a real implementation, this would call the API\n      // await axios.post(`/api/monitoring/alerts/${alert.id}/acknowledge`, {}, {\n      //   headers: { Authorization: `Bearer ${this.token}` },\n      // });\n      \n      // Mock implementation\n      alert.acknowledged = true;\n    },\n    resolveAlert(alert) {\n      // In a real implementation, this would call the API\n      // await axios.post(`/api/monitoring/alerts/${alert.id}/resolve`, {}, {\n      //   headers: { Authorization: `Bearer ${this.token}` },\n      // });\n      \n      // Mock implementation\n      alert.resolved = true;\n      \n      // Remove the alert from the list after a short delay\n      setTimeout(() => {\n        this.alerts = this.alerts.filter(a => a.id !== alert.id);\n      }, 500);\n    },\n    initCharts() {\n      // In a real implementation, this would initialize Chart.js charts\n      // This is a mock implementation that doesn't actually create charts\n      console.log('Charts would be initialized here in a real implementation');\n      \n      // Mock CPU chart data\n      const cpuData = {\n        labels: Array.from({ length: 24 }, (_, i) => `${23 - i}h ago`),\n        datasets: [\n          {\n            label: 'CPU Usage (%)',\n            data: Array.from({ length: 24 }, () => Math.random() * 50 + 20),\n            borderColor: '#1976D2',\n            backgroundColor: 'rgba(25, 118, 210, 0.1)',\n            fill: true,\n          },\n        ],\n      };\n      \n      // Mock Memory chart data\n      const memoryData = {\n        labels: Array.from({ length: 24 }, (_, i) => `${23 - i}h ago`),\n        datasets: [\n          {\n            label: 'Memory Usage (%)',\n            data: Array.from({ length: 24 }, () => Math.random() * 30 + 30),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            fill: true,\n          },\n        ],\n      };\n      \n      // In a real implementation, we would create actual Chart.js instances\n      this.charts.cpu = cpuData;\n      this.charts.memory = memoryData;\n    },\n    updateCpuChart() {\n      // In a real implementation, this would update the CPU chart with new data\n      console.log(`CPU chart would be updated with time range: ${this.cpuTimeRange}`);\n    },\n    updateMemoryChart() {\n      // In a real implementation, this would update the Memory chart with new data\n      console.log(`Memory chart would be updated with time range: ${this.memoryTimeRange}`);\n    },\n    initContainerCharts() {\n      // In a real implementation, this would initialize container-specific charts\n      console.log('Container charts would be initialized here in a real implementation');\n      \n      // Mock container chart data\n      const containerCpuData = {\n        labels: Array.from({ length: 24 }, (_, i) => `${23 - i}h ago`),\n        datasets: [\n          {\n            label: 'CPU Usage (%)',\n            data: Array.from({ length: 24 }, () => Math.random() * 50 + 20),\n            borderColor: '#1976D2',\n            backgroundColor: 'rgba(25, 118, 210, 0.1)',\n            fill: true,\n          },\n        ],\n      };\n      \n      const containerMemoryData = {\n        labels: Array.from({ length: 24 }, (_, i) => `${23 - i}h ago`),\n        datasets: [\n          {\n            label: 'Memory Usage (%)',\n            data: Array.from({ length: 24 }, () => Math.random() * 30 + 30),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            fill: true,\n          },\n        ],\n      };\n      \n      const containerNetworkData = {\n        labels: Array.from({ length: 24 }, (_, i) => `${23 - i}h ago`),\n        datasets: [\n          {\n            label: 'Network RX (MB/s)',\n            data: Array.from({ length: 24 }, () => Math.random() * 3 + 1),\n            borderColor: '#2196F3',\n            backgroundColor: 'rgba(33, 150, 243, 0.1)',\n            fill: true,\n          },\n          {\n            label: 'Network TX (MB/s)',\n            data: Array.from({ length: 24 }, () => Math.random() * 2 + 0.5),\n            borderColor: '#FF9800',\n            backgroundColor: 'rgba(255, 152, 0, 0.1)',\n            fill: true,\n          },\n        ],\n      };\n      \n      const containerDiskData = {\n        labels: Array.from({ length: 24 }, (_, i) => `${23 - i}h ago`),\n        datasets: [\n          {\n            label: 'Disk Read (MB/s)',\n            data: Array.from({ length: 24 }, () => Math.random() * 5 + 0.5),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            fill: true,\n          },\n          {\n            label: 'Disk Write (MB/s)',\n            data: Array.from({ length: 24 }, () => Math.random() * 3 + 0.2),\n            borderColor: '#9C27B0',\n            backgroundColor: 'rgba(156, 39, 176, 0.1)',\n            fill: true,\n          },\n        ],\n      };\n      \n      // In a real implementation, we would create actual Chart.js instances\n      this.charts.containerCpu = containerCpuData;\n      this.charts.containerMemory = containerMemoryData;\n      this.charts.containerNetwork = containerNetworkData;\n      this.charts.containerDisk = containerDiskData;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.monitoring-dashboard {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}