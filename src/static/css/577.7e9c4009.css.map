{"version":3,"file":"css/577.7e9c4009.css","mappings":"AAwnBA,iCACE,YACF,CAEA,uCACE,gBAAiB,CACjB,eAAgB,CAChB,qBAAsB,CACtB,oBACF,CAEA,wCACE,qBACF","sources":["webpack://dockerforge-web-ui/./src/views/compose/ComposeDetail.vue"],"sourcesContent":["<template>\n  <div class=\"compose-detail\">\n    <v-row>\n      <v-col cols=\"12\">\n        <v-btn text to=\"/compose\" class=\"mb-4\">\n          <v-icon left>mdi-arrow-left</v-icon>\n          Back to Compose Projects\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Project Not Found -->\n    <v-alert v-else-if=\"!project\" type=\"warning\" class=\"mb-4\">\n      Compose project not found\n    </v-alert>\n\n    <!-- Project Details -->\n    <template v-else>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline d-flex align-center\">\n              {{ project.name }}\n              <v-chip\n                class=\"ml-2\"\n                :color=\"getStatusColor(project.status)\"\n                text-color=\"white\"\n                small\n              >\n                {{ project.status }}\n              </v-chip>\n              <v-spacer></v-spacer>\n              <v-btn-toggle>\n                <v-btn\n                  :disabled=\"project.status === 'running'\"\n                  @click=\"startProject\"\n                  color=\"success\"\n                  text\n                >\n                  <v-icon left>mdi-play</v-icon>\n                  Start\n                </v-btn>\n                <v-btn\n                  :disabled=\"project.status !== 'running'\"\n                  @click=\"stopProject\"\n                  color=\"error\"\n                  text\n                >\n                  <v-icon left>mdi-stop</v-icon>\n                  Stop\n                </v-btn>\n                <v-btn\n                  :disabled=\"project.status !== 'running'\"\n                  @click=\"restartProject\"\n                  color=\"primary\"\n                  text\n                >\n                  <v-icon left>mdi-restart</v-icon>\n                  Restart\n                </v-btn>\n                <v-btn\n                  @click=\"showDeleteDialog\"\n                  color=\"error\"\n                  text\n                >\n                  <v-icon left>mdi-delete</v-icon>\n                  Delete\n                </v-btn>\n              </v-btn-toggle>\n            </v-card-title>\n            <v-card-text>\n              <v-simple-table>\n                <template v-slot:default>\n                  <tbody>\n                    <tr>\n                      <td class=\"font-weight-bold\">ID</td>\n                      <td>{{ project.id }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Location</td>\n                      <td>{{ project.location }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Services</td>\n                      <td>{{ project.service_count }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Created</td>\n                      <td>{{ formatDate(project.created_at) }}</td>\n                    </tr>\n                    <tr v-if=\"project.last_deployed\">\n                      <td class=\"font-weight-bold\">Last Deployed</td>\n                      <td>{{ formatDate(project.last_deployed) }}</td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-simple-table>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Services -->\n      <v-row>\n        <v-col cols=\"12\">\n          <h2 class=\"text-h5 mb-3\">Services</h2>\n          <v-card>\n            <v-data-table\n              :headers=\"serviceHeaders\"\n              :items=\"services\"\n              :items-per-page=\"10\"\n              class=\"elevation-1\"\n            >\n              <!-- Name Column -->\n              <template v-slot:item.name=\"{ item }\">\n                <router-link \n                  v-if=\"item.container_id\" \n                  :to=\"`/containers/${item.container_id}`\" \n                  class=\"text-decoration-none\"\n                >\n                  {{ item.name }}\n                </router-link>\n                <span v-else>{{ item.name }}</span>\n              </template>\n\n              <!-- Status Column -->\n              <template v-slot:item.status=\"{ item }\">\n                <v-chip\n                  :color=\"getStatusColor(item.status)\"\n                  text-color=\"white\"\n                  small\n                >\n                  {{ item.status }}\n                </v-chip>\n              </template>\n\n              <!-- Actions Column -->\n              <template v-slot:item.actions=\"{ item }\">\n                <v-btn\n                  icon\n                  small\n                  :disabled=\"item.status === 'running'\"\n                  @click=\"startService(item)\"\n                  title=\"Start\"\n                >\n                  <v-icon small>mdi-play</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  small\n                  :disabled=\"item.status !== 'running'\"\n                  @click=\"stopService(item)\"\n                  title=\"Stop\"\n                >\n                  <v-icon small>mdi-stop</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  small\n                  :disabled=\"item.status !== 'running'\"\n                  @click=\"restartService(item)\"\n                  title=\"Restart\"\n                >\n                  <v-icon small>mdi-restart</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  small\n                  :disabled=\"!item.logs_available\"\n                  @click=\"viewLogs(item)\"\n                  title=\"View Logs\"\n                >\n                  <v-icon small>mdi-text-box-outline</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Compose File -->\n      <v-row class=\"mt-4\">\n        <v-col cols=\"12\">\n          <h2 class=\"text-h5 mb-3\">Compose File</h2>\n          <v-card>\n            <v-card-title class=\"d-flex align-center\">\n              <span>docker-compose.yml</span>\n              <v-spacer></v-spacer>\n              <v-btn\n                color=\"primary\"\n                text\n                @click=\"editComposeFile\"\n              >\n                <v-icon left>mdi-pencil</v-icon>\n                Edit\n              </v-btn>\n            </v-card-title>\n            <v-card-text>\n              <v-sheet\n                class=\"pa-4 compose-file-content\"\n                outlined\n                rounded\n              >\n                <pre>{{ composeFileContent }}</pre>\n              </v-sheet>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n    </template>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Compose Project</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the compose project <strong>{{ project?.name }}</strong>?\n          <v-checkbox\n            v-model=\"deleteWithVolumes\"\n            label=\"Also remove associated volumes\"\n            class=\"mt-4\"\n          ></v-checkbox>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteProject\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Logs Dialog -->\n    <v-dialog v-model=\"logsDialog\" max-width=\"800\">\n      <v-card>\n        <v-card-title class=\"headline\">\n          Logs: {{ selectedService?.name }}\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"logsDialog = false\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text>\n          <v-checkbox\n            v-model=\"followLogs\"\n            label=\"Follow logs\"\n            class=\"mb-2\"\n          ></v-checkbox>\n          <v-sheet\n            class=\"pa-4 logs-content\"\n            outlined\n            rounded\n            height=\"400px\"\n            style=\"overflow-y: auto; font-family: monospace;\"\n          >\n            <div v-for=\"(line, index) in serviceLogs\" :key=\"index\">\n              {{ line }}\n            </div>\n          </v-sheet>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"logsDialog = false\">\n            Close\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Edit Compose File Dialog -->\n    <v-dialog v-model=\"editDialog\" max-width=\"800\">\n      <v-card>\n        <v-card-title class=\"headline\">\n          Edit Compose File\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"editDialog = false\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text>\n          <v-textarea\n            v-model=\"editedComposeFile\"\n            outlined\n            rows=\"20\"\n            class=\"font-family-monospace\"\n          ></v-textarea>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"editDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"primary\" text @click=\"saveComposeFile\">\n            Save\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'ComposeDetail',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      project: null,\n      services: [],\n      composeFileContent: '',\n      serviceHeaders: [\n        { text: 'Name', value: 'name', sortable: true },\n        { text: 'Status', value: 'status', sortable: true },\n        { text: 'Image', value: 'image', sortable: true },\n        { text: 'Ports', value: 'ports', sortable: false },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      deleteDialog: false,\n      deleteWithVolumes: false,\n      logsDialog: false,\n      selectedService: null,\n      serviceLogs: [],\n      followLogs: false,\n      editDialog: false,\n      editedComposeFile: '',\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchProjectDetails();\n  },\n  methods: {\n    async fetchProjectDetails() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`/api/compose/${this.$route.params.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.project = response.data;\n        // this.services = response.data.services;\n        // this.composeFileContent = response.data.compose_file;\n        \n        // Mock data for development\n        setTimeout(() => {\n          this.project = {\n            id: this.$route.params.id,\n            name: 'web-app',\n            status: 'running',\n            service_count: 3,\n            location: '/home/user/projects/web-app',\n            created_at: '2025-03-15T10:00:00Z',\n            last_deployed: '2025-03-16T08:30:00Z',\n          };\n          \n          this.services = [\n            {\n              name: 'web',\n              status: 'running',\n              image: 'nginx:latest',\n              ports: ['80:80', '443:443'],\n              container_id: 'c1',\n              logs_available: true,\n            },\n            {\n              name: 'api',\n              status: 'running',\n              image: 'node:14-alpine',\n              ports: ['3000:3000'],\n              container_id: 'c4',\n              logs_available: true,\n            },\n            {\n              name: 'db',\n              status: 'running',\n              image: 'postgres:13',\n              ports: ['5432:5432'],\n              container_id: 'c3',\n              logs_available: true,\n            },\n          ];\n          \n          this.composeFileContent = `version: '3'\n\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/conf:/etc/nginx/conf.d\n    depends_on:\n      - api\n    restart: always\n\n  api:\n    image: node:14-alpine\n    working_dir: /app\n    volumes:\n      - ./api:/app\n    command: npm start\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DB_HOST=db\n    depends_on:\n      - db\n    restart: always\n\n  db:\n    image: postgres:13\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=example\n      - POSTGRES_USER=app\n      - POSTGRES_DB=app_db\n    ports:\n      - \"5432:5432\"\n    restart: always\n\nvolumes:\n  postgres_data:`;\n          \n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load compose project details. Please try again.';\n        this.loading = false;\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    getStatusColor(status) {\n      switch (status) {\n        case 'running':\n          return 'success';\n        case 'stopped':\n          return 'error';\n        case 'partial':\n          return 'warning';\n        default:\n          return 'grey';\n      }\n    },\n    async startProject() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${this.project.id}/start`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.project.status = 'running';\n        this.services.forEach(service => {\n          service.status = 'running';\n        });\n      } catch (error) {\n        this.error = `Failed to start compose project ${this.project.name}`;\n      }\n    },\n    async stopProject() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${this.project.id}/stop`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.project.status = 'stopped';\n        this.services.forEach(service => {\n          service.status = 'stopped';\n        });\n      } catch (error) {\n        this.error = `Failed to stop compose project ${this.project.name}`;\n      }\n    },\n    async restartProject() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${this.project.id}/restart`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.project.status = 'running';\n        this.services.forEach(service => {\n          service.status = 'running';\n        });\n      } catch (error) {\n        this.error = `Failed to restart compose project ${this.project.name}`;\n      }\n    },\n    showDeleteDialog() {\n      this.deleteWithVolumes = false;\n      this.deleteDialog = true;\n    },\n    async deleteProject() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/compose/${this.project.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        //   params: { removeVolumes: this.deleteWithVolumes },\n        // });\n        \n        // Navigate back to compose list\n        this.$router.push('/compose');\n      } catch (error) {\n        this.error = `Failed to delete compose project ${this.project.name}`;\n        this.deleteDialog = false;\n      }\n    },\n    async startService(service) {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${this.project.id}/services/${service.name}/start`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        service.status = 'running';\n        this.updateProjectStatus();\n      } catch (error) {\n        this.error = `Failed to start service ${service.name}`;\n      }\n    },\n    async stopService(service) {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${this.project.id}/services/${service.name}/stop`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        service.status = 'stopped';\n        this.updateProjectStatus();\n      } catch (error) {\n        this.error = `Failed to stop service ${service.name}`;\n      }\n    },\n    async restartService(service) {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${this.project.id}/services/${service.name}/restart`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        service.status = 'running';\n        this.updateProjectStatus();\n      } catch (error) {\n        this.error = `Failed to restart service ${service.name}`;\n      }\n    },\n    updateProjectStatus() {\n      const runningServices = this.services.filter(s => s.status === 'running').length;\n      \n      if (runningServices === 0) {\n        this.project.status = 'stopped';\n      } else if (runningServices === this.services.length) {\n        this.project.status = 'running';\n      } else {\n        this.project.status = 'partial';\n      }\n    },\n    viewLogs(service) {\n      this.selectedService = service;\n      this.serviceLogs = [\n        `[2025-03-16 08:30:01] ${service.name} | Starting ${service.name} service...`,\n        `[2025-03-16 08:30:02] ${service.name} | Service started successfully`,\n        `[2025-03-16 08:30:03] ${service.name} | Listening on port ${service.ports[0].split(':')[0]}`,\n        `[2025-03-16 08:35:15] ${service.name} | Received request from 192.168.1.5`,\n        `[2025-03-16 08:35:16] ${service.name} | Request processed successfully (200 OK)`,\n        `[2025-03-16 08:40:22] ${service.name} | Received request from 192.168.1.10`,\n        `[2025-03-16 08:40:23] ${service.name} | Request processed successfully (200 OK)`,\n        `[2025-03-16 08:45:30] ${service.name} | Performing scheduled health check`,\n        `[2025-03-16 08:45:31] ${service.name} | Health check passed: all systems operational`,\n      ];\n      this.logsDialog = true;\n    },\n    editComposeFile() {\n      this.editedComposeFile = this.composeFileContent;\n      this.editDialog = true;\n    },\n    async saveComposeFile() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.put(`/api/compose/${this.project.id}/file`, {\n        //   content: this.editedComposeFile\n        // }, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.composeFileContent = this.editedComposeFile;\n        this.editDialog = false;\n      } catch (error) {\n        this.error = 'Failed to save compose file';\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.compose-detail {\n  padding: 16px;\n}\n\n.compose-file-content {\n  max-height: 400px;\n  overflow-y: auto;\n  font-family: monospace;\n  white-space: pre-wrap;\n}\n\n.font-family-monospace {\n  font-family: monospace;\n}\n</style>\n"],"names":[],"sourceRoot":""}