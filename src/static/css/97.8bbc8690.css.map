{"version":3,"file":"css/97.8bbc8690.css","mappings":"AAy5BA,2BACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/settings/Settings.vue"],"sourcesContent":["<template>\n  <div class=\"settings\">\n    <h1 class=\"text-h4 mb-4\">Settings</h1>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Settings Content -->\n    <template v-else>\n      <v-tabs v-model=\"activeTab\" background-color=\"primary\" dark>\n        <v-tab>General</v-tab>\n        <v-tab>Docker</v-tab>\n        <v-tab>Security</v-tab>\n        <v-tab>Monitoring</v-tab>\n        <v-tab>Backup</v-tab>\n        <v-tab>Notifications</v-tab>\n        <v-tab>Advanced</v-tab>\n      </v-tabs>\n\n      <v-tabs-items v-model=\"activeTab\">\n        <!-- General Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">General Settings</h2>\n              \n              <v-form ref=\"generalForm\" v-model=\"generalFormValid\">\n                <v-switch\n                  v-model=\"settings.general.darkMode\"\n                  label=\"Dark Mode\"\n                  hint=\"Enable dark mode for the UI\"\n                  persistent-hint\n                ></v-switch>\n                \n                <v-select\n                  v-model=\"settings.general.language\"\n                  :items=\"languageOptions\"\n                  label=\"Language\"\n                  hint=\"Select your preferred language\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-select\n                  v-model=\"settings.general.dateFormat\"\n                  :items=\"dateFormatOptions\"\n                  label=\"Date Format\"\n                  hint=\"Select your preferred date format\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-text-field\n                  v-model=\"settings.general.refreshInterval\"\n                  label=\"Auto-refresh Interval (seconds)\"\n                  type=\"number\"\n                  hint=\"Set to 0 to disable auto-refresh\"\n                  persistent-hint\n                  :rules=\"[v => v >= 0 || 'Interval must be non-negative']\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveGeneralSettings\"\n                  :disabled=\"!generalFormValid\"\n                >\n                  Save General Settings\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n\n        <!-- Docker Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">Docker Settings</h2>\n              \n              <v-form ref=\"dockerForm\" v-model=\"dockerFormValid\">\n                <v-text-field\n                  v-model=\"settings.docker.socketPath\"\n                  label=\"Docker Socket Path\"\n                  hint=\"Path to the Docker socket\"\n                  persistent-hint\n                  :rules=\"[v => !!v || 'Socket path is required']\"\n                ></v-text-field>\n                \n                <v-switch\n                  v-model=\"settings.docker.useTLS\"\n                  label=\"Use TLS\"\n                  hint=\"Enable TLS for Docker API communication\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-text-field\n                  v-model=\"settings.docker.certPath\"\n                  label=\"Certificate Path\"\n                  hint=\"Path to TLS certificates\"\n                  persistent-hint\n                  :disabled=\"!settings.docker.useTLS\"\n                  :rules=\"[v => !settings.docker.useTLS || !!v || 'Certificate path is required when TLS is enabled']\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.docker.registryUrl\"\n                  label=\"Default Registry URL\"\n                  hint=\"URL of the default Docker registry\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-switch\n                  v-model=\"settings.docker.pruneUnused\"\n                  label=\"Auto-prune Unused Resources\"\n                  hint=\"Automatically remove unused containers, networks, and images\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-select\n                  v-model=\"settings.docker.pruneSchedule\"\n                  :items=\"pruneScheduleOptions\"\n                  label=\"Prune Schedule\"\n                  hint=\"When to automatically prune unused resources\"\n                  persistent-hint\n                  :disabled=\"!settings.docker.pruneUnused\"\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveDockerSettings\"\n                  :disabled=\"!dockerFormValid\"\n                >\n                  Save Docker Settings\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n\n        <!-- Security Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">Security Settings</h2>\n              \n              <v-form ref=\"securityForm\" v-model=\"securityFormValid\">\n                <v-switch\n                  v-model=\"settings.security.enableVulnerabilityScanning\"\n                  label=\"Enable Vulnerability Scanning\"\n                  hint=\"Automatically scan images for vulnerabilities\"\n                  persistent-hint\n                ></v-switch>\n                \n                <v-select\n                  v-model=\"settings.security.scanSchedule\"\n                  :items=\"scanScheduleOptions\"\n                  label=\"Scan Schedule\"\n                  hint=\"When to automatically scan images\"\n                  persistent-hint\n                  :disabled=\"!settings.security.enableVulnerabilityScanning\"\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-select\n                  v-model=\"settings.security.vulnerabilitySeverity\"\n                  :items=\"severityOptions\"\n                  label=\"Minimum Vulnerability Severity\"\n                  hint=\"Minimum severity level to report\"\n                  persistent-hint\n                  :disabled=\"!settings.security.enableVulnerabilityScanning\"\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-switch\n                  v-model=\"settings.security.enforceImageSigning\"\n                  label=\"Enforce Image Signing\"\n                  hint=\"Only allow signed images to be pulled\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-switch\n                  v-model=\"settings.security.restrictPrivilegedContainers\"\n                  label=\"Restrict Privileged Containers\"\n                  hint=\"Prevent running containers in privileged mode\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveSecuritySettings\"\n                  :disabled=\"!securityFormValid\"\n                >\n                  Save Security Settings\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n\n        <!-- Monitoring Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">Monitoring Settings</h2>\n              \n              <v-form ref=\"monitoringForm\" v-model=\"monitoringFormValid\">\n                <v-switch\n                  v-model=\"settings.monitoring.enableResourceMonitoring\"\n                  label=\"Enable Resource Monitoring\"\n                  hint=\"Monitor CPU, memory, and disk usage\"\n                  persistent-hint\n                ></v-switch>\n                \n                <v-text-field\n                  v-model=\"settings.monitoring.collectionInterval\"\n                  label=\"Collection Interval (seconds)\"\n                  type=\"number\"\n                  hint=\"How often to collect metrics\"\n                  persistent-hint\n                  :rules=\"[v => v > 0 || 'Interval must be positive']\"\n                  :disabled=\"!settings.monitoring.enableResourceMonitoring\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.monitoring.retentionPeriod\"\n                  label=\"Data Retention Period (days)\"\n                  type=\"number\"\n                  hint=\"How long to keep monitoring data\"\n                  persistent-hint\n                  :rules=\"[v => v > 0 || 'Retention period must be positive']\"\n                  :disabled=\"!settings.monitoring.enableResourceMonitoring\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-switch\n                  v-model=\"settings.monitoring.enableAnomalyDetection\"\n                  label=\"Enable Anomaly Detection\"\n                  hint=\"Detect unusual resource usage patterns\"\n                  persistent-hint\n                  :disabled=\"!settings.monitoring.enableResourceMonitoring\"\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-text-field\n                  v-model=\"settings.monitoring.cpuThreshold\"\n                  label=\"CPU Alert Threshold (%)\"\n                  type=\"number\"\n                  hint=\"Alert when CPU usage exceeds this percentage\"\n                  persistent-hint\n                  :rules=\"[\n                    v => v >= 0 && v <= 100 || 'Threshold must be between 0 and 100'\n                  ]\"\n                  :disabled=\"!settings.monitoring.enableResourceMonitoring\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.monitoring.memoryThreshold\"\n                  label=\"Memory Alert Threshold (%)\"\n                  type=\"number\"\n                  hint=\"Alert when memory usage exceeds this percentage\"\n                  persistent-hint\n                  :rules=\"[\n                    v => v >= 0 && v <= 100 || 'Threshold must be between 0 and 100'\n                  ]\"\n                  :disabled=\"!settings.monitoring.enableResourceMonitoring\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.monitoring.diskThreshold\"\n                  label=\"Disk Alert Threshold (%)\"\n                  type=\"number\"\n                  hint=\"Alert when disk usage exceeds this percentage\"\n                  persistent-hint\n                  :rules=\"[\n                    v => v >= 0 && v <= 100 || 'Threshold must be between 0 and 100'\n                  ]\"\n                  :disabled=\"!settings.monitoring.enableResourceMonitoring\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveMonitoringSettings\"\n                  :disabled=\"!monitoringFormValid\"\n                >\n                  Save Monitoring Settings\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n\n        <!-- Backup Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">Backup Settings</h2>\n              \n              <v-form ref=\"backupForm\" v-model=\"backupFormValid\">\n                <v-switch\n                  v-model=\"settings.backup.enableAutoBackup\"\n                  label=\"Enable Automatic Backups\"\n                  hint=\"Automatically backup Docker resources\"\n                  persistent-hint\n                ></v-switch>\n                \n                <v-select\n                  v-model=\"settings.backup.backupSchedule\"\n                  :items=\"backupScheduleOptions\"\n                  label=\"Backup Schedule\"\n                  hint=\"When to automatically create backups\"\n                  persistent-hint\n                  :disabled=\"!settings.backup.enableAutoBackup\"\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-text-field\n                  v-model=\"settings.backup.backupLocation\"\n                  label=\"Backup Storage Location\"\n                  hint=\"Path where backups will be stored\"\n                  persistent-hint\n                  :rules=\"[v => !!v || 'Backup location is required']\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.backup.retentionCount\"\n                  label=\"Backup Retention Count\"\n                  type=\"number\"\n                  hint=\"Number of backups to keep\"\n                  persistent-hint\n                  :rules=\"[v => v > 0 || 'Retention count must be positive']\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-switch\n                  v-model=\"settings.backup.compressBackups\"\n                  label=\"Compress Backups\"\n                  hint=\"Compress backup files to save space\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-switch\n                  v-model=\"settings.backup.includeVolumes\"\n                  label=\"Include Volumes in Backups\"\n                  hint=\"Include volume data in backups\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveBackupSettings\"\n                  :disabled=\"!backupFormValid\"\n                >\n                  Save Backup Settings\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n\n        <!-- Notification Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">Notification Settings</h2>\n              \n              <v-form ref=\"notificationForm\" v-model=\"notificationFormValid\">\n                <v-switch\n                  v-model=\"settings.notifications.enableEmailNotifications\"\n                  label=\"Enable Email Notifications\"\n                  hint=\"Send notifications via email\"\n                  persistent-hint\n                ></v-switch>\n                \n                <v-text-field\n                  v-model=\"settings.notifications.emailRecipients\"\n                  label=\"Email Recipients\"\n                  hint=\"Comma-separated list of email addresses\"\n                  persistent-hint\n                  :rules=\"[\n                    v => !settings.notifications.enableEmailNotifications || !!v || 'Email recipients are required'\n                  ]\"\n                  :disabled=\"!settings.notifications.enableEmailNotifications\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.notifications.smtpServer\"\n                  label=\"SMTP Server\"\n                  hint=\"SMTP server address\"\n                  persistent-hint\n                  :rules=\"[\n                    v => !settings.notifications.enableEmailNotifications || !!v || 'SMTP server is required'\n                  ]\"\n                  :disabled=\"!settings.notifications.enableEmailNotifications\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.notifications.smtpPort\"\n                  label=\"SMTP Port\"\n                  type=\"number\"\n                  hint=\"SMTP server port\"\n                  persistent-hint\n                  :rules=\"[\n                    v => !settings.notifications.enableEmailNotifications || !!v || 'SMTP port is required'\n                  ]\"\n                  :disabled=\"!settings.notifications.enableEmailNotifications\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-switch\n                  v-model=\"settings.notifications.enableSlackNotifications\"\n                  label=\"Enable Slack Notifications\"\n                  hint=\"Send notifications to Slack\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-text-field\n                  v-model=\"settings.notifications.slackWebhookUrl\"\n                  label=\"Slack Webhook URL\"\n                  hint=\"Webhook URL for Slack integration\"\n                  persistent-hint\n                  :rules=\"[\n                    v => !settings.notifications.enableSlackNotifications || !!v || 'Webhook URL is required'\n                  ]\"\n                  :disabled=\"!settings.notifications.enableSlackNotifications\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-select\n                  v-model=\"settings.notifications.notificationEvents\"\n                  :items=\"notificationEventOptions\"\n                  label=\"Events to Notify\"\n                  hint=\"Select which events trigger notifications\"\n                  persistent-hint\n                  multiple\n                  chips\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveNotificationSettings\"\n                  :disabled=\"!notificationFormValid\"\n                >\n                  Save Notification Settings\n                </v-btn>\n                \n                <v-btn\n                  color=\"secondary\"\n                  class=\"mt-4 ml-2\"\n                  @click=\"testNotifications\"\n                >\n                  Test Notifications\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n\n        <!-- Advanced Settings -->\n        <v-tab-item>\n          <v-card flat>\n            <v-card-text>\n              <h2 class=\"text-h5 mb-4\">Advanced Settings</h2>\n              \n              <v-alert\n                type=\"warning\"\n                class=\"mb-4\"\n              >\n                These settings are for advanced users. Incorrect configuration may cause system instability.\n              </v-alert>\n              \n              <v-form ref=\"advancedForm\" v-model=\"advancedFormValid\">\n                <v-switch\n                  v-model=\"settings.advanced.enableDebugMode\"\n                  label=\"Enable Debug Mode\"\n                  hint=\"Enable detailed logging for troubleshooting\"\n                  persistent-hint\n                ></v-switch>\n                \n                <v-select\n                  v-model=\"settings.advanced.logLevel\"\n                  :items=\"logLevelOptions\"\n                  label=\"Log Level\"\n                  hint=\"Set the logging verbosity\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-select>\n                \n                <v-text-field\n                  v-model=\"settings.advanced.apiRateLimit\"\n                  label=\"API Rate Limit (requests per minute)\"\n                  type=\"number\"\n                  hint=\"Limit API request rate\"\n                  persistent-hint\n                  :rules=\"[v => v > 0 || 'Rate limit must be positive']\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-text-field\n                  v-model=\"settings.advanced.sessionTimeout\"\n                  label=\"Session Timeout (minutes)\"\n                  type=\"number\"\n                  hint=\"User session timeout\"\n                  persistent-hint\n                  :rules=\"[v => v > 0 || 'Timeout must be positive']\"\n                  class=\"mt-4\"\n                ></v-text-field>\n                \n                <v-switch\n                  v-model=\"settings.advanced.enableTelemetry\"\n                  label=\"Enable Telemetry\"\n                  hint=\"Send anonymous usage data to help improve DockerForge\"\n                  persistent-hint\n                  class=\"mt-4\"\n                ></v-switch>\n                \n                <v-btn\n                  color=\"primary\"\n                  class=\"mt-4\"\n                  @click=\"saveAdvancedSettings\"\n                  :disabled=\"!advancedFormValid\"\n                >\n                  Save Advanced Settings\n                </v-btn>\n                \n                <v-btn\n                  color=\"error\"\n                  class=\"mt-4 ml-2\"\n                  @click=\"showResetDialog\"\n                >\n                  Reset All Settings\n                </v-btn>\n              </v-form>\n            </v-card-text>\n          </v-card>\n        </v-tab-item>\n      </v-tabs-items>\n    </template>\n\n    <!-- Reset Confirmation Dialog -->\n    <v-dialog v-model=\"resetDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Reset All Settings</v-card-title>\n        <v-card-text>\n          Are you sure you want to reset all settings to their default values?\n          This action cannot be undone.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"resetDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"resetAllSettings\">\n            Reset\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Success Snackbar -->\n    <v-snackbar\n      v-model=\"showSuccessSnackbar\"\n      :timeout=\"3000\"\n      color=\"success\"\n    >\n      {{ successMessage }}\n      <template v-slot:action=\"{ attrs }\">\n        <v-btn\n          text\n          v-bind=\"attrs\"\n          @click=\"showSuccessSnackbar = false\"\n        >\n          Close\n        </v-btn>\n      </template>\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'Settings',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      activeTab: 0,\n      settings: {\n        general: {\n          darkMode: false,\n          language: 'en',\n          dateFormat: 'MM/DD/YYYY',\n          refreshInterval: 30,\n        },\n        docker: {\n          socketPath: '/var/run/docker.sock',\n          useTLS: false,\n          certPath: '',\n          registryUrl: 'docker.io',\n          pruneUnused: true,\n          pruneSchedule: 'weekly',\n        },\n        security: {\n          enableVulnerabilityScanning: true,\n          scanSchedule: 'daily',\n          vulnerabilitySeverity: 'high',\n          enforceImageSigning: false,\n          restrictPrivilegedContainers: true,\n        },\n        monitoring: {\n          enableResourceMonitoring: true,\n          collectionInterval: 60,\n          retentionPeriod: 30,\n          enableAnomalyDetection: true,\n          cpuThreshold: 80,\n          memoryThreshold: 80,\n          diskThreshold: 85,\n        },\n        backup: {\n          enableAutoBackup: true,\n          backupSchedule: 'weekly',\n          backupLocation: '/var/lib/dockerforge/backups',\n          retentionCount: 5,\n          compressBackups: true,\n          includeVolumes: true,\n        },\n        notifications: {\n          enableEmailNotifications: false,\n          emailRecipients: '',\n          smtpServer: '',\n          smtpPort: 587,\n          enableSlackNotifications: false,\n          slackWebhookUrl: '',\n          notificationEvents: ['error', 'security'],\n        },\n        advanced: {\n          enableDebugMode: false,\n          logLevel: 'info',\n          apiRateLimit: 60,\n          sessionTimeout: 30,\n          enableTelemetry: true,\n        },\n      },\n      generalFormValid: true,\n      dockerFormValid: true,\n      securityFormValid: true,\n      monitoringFormValid: true,\n      backupFormValid: true,\n      notificationFormValid: true,\n      advancedFormValid: true,\n      resetDialog: false,\n      showSuccessSnackbar: false,\n      successMessage: '',\n      \n      // Options for select inputs\n      languageOptions: [\n        { text: 'English', value: 'en' },\n        { text: 'Spanish', value: 'es' },\n        { text: 'French', value: 'fr' },\n        { text: 'German', value: 'de' },\n        { text: 'Chinese', value: 'zh' },\n        { text: 'Japanese', value: 'ja' },\n      ],\n      dateFormatOptions: [\n        { text: 'MM/DD/YYYY', value: 'MM/DD/YYYY' },\n        { text: 'DD/MM/YYYY', value: 'DD/MM/YYYY' },\n        { text: 'YYYY-MM-DD', value: 'YYYY-MM-DD' },\n      ],\n      pruneScheduleOptions: [\n        { text: 'Daily', value: 'daily' },\n        { text: 'Weekly', value: 'weekly' },\n        { text: 'Monthly', value: 'monthly' },\n      ],\n      scanScheduleOptions: [\n        { text: 'Hourly', value: 'hourly' },\n        { text: 'Daily', value: 'daily' },\n        { text: 'Weekly', value: 'weekly' },\n      ],\n      severityOptions: [\n        { text: 'Critical', value: 'critical' },\n        { text: 'High', value: 'high' },\n        { text: 'Medium', value: 'medium' },\n        { text: 'Low', value: 'low' },\n      ],\n      backupScheduleOptions: [\n        { text: 'Daily', value: 'daily' },\n        { text: 'Weekly', value: 'weekly' },\n        { text: 'Monthly', value: 'monthly' },\n      ],\n      notificationEventOptions: [\n        { text: 'Errors', value: 'error' },\n        { text: 'Warnings', value: 'warning' },\n        { text: 'Security Issues', value: 'security' },\n        { text: 'Resource Alerts', value: 'resource' },\n        { text: 'Container Events', value: 'container' },\n        { text: 'Backup Events', value: 'backup' },\n      ],\n      logLevelOptions: [\n        { text: 'Error', value: 'error' },\n        { text: 'Warning', value: 'warning' },\n        { text: 'Info', value: 'info' },\n        { text: 'Debug', value: 'debug' },\n        { text: 'Trace', value: 'trace' },\n      ],\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchSettings();\n    \n    // Initialize the dark mode setting from the store\n    this.settings.general.darkMode = this.$store.getters.darkMode;\n  },\n  methods: {\n    async fetchSettings() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get('/api/settings', {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.settings = response.data;\n        \n        // Mock implementation - just use the default settings\n        setTimeout(() => {\n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load settings. Please try again.';\n        this.loading = false;\n      }\n    },\n    async saveGeneralSettings() {\n      if (!this.$refs.generalForm.validate()) return;\n      \n      try {\n        // Update the dark mode setting in the store\n        this.$store.commit('SET_DARK_MODE', this.settings.general.darkMode);\n        \n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/general', this.settings.general, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('General settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save general settings';\n      }\n    },\n    async saveDockerSettings() {\n      if (!this.$refs.dockerForm.validate()) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/docker', this.settings.docker, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Docker settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save Docker settings';\n      }\n    },\n    async saveSecuritySettings() {\n      if (!this.$refs.securityForm.validate()) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/security', this.settings.security, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Security settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save security settings';\n      }\n    },\n    async saveMonitoringSettings() {\n      if (!this.$refs.monitoringForm.validate()) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/monitoring', this.settings.monitoring, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Monitoring settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save monitoring settings';\n      }\n    },\n    async saveBackupSettings() {\n      if (!this.$refs.backupForm.validate()) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/backup', this.settings.backup, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Backup settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save backup settings';\n      }\n    },\n    async saveNotificationSettings() {\n      if (!this.$refs.notificationForm.validate()) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/notifications', this.settings.notifications, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Notification settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save notification settings';\n      }\n    },\n    async saveAdvancedSettings() {\n      if (!this.$refs.advancedForm.validate()) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.put('/api/settings/advanced', this.settings.advanced, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Advanced settings saved successfully');\n      } catch (error) {\n        this.error = 'Failed to save advanced settings';\n      }\n    },\n    showResetDialog() {\n      this.resetDialog = true;\n    },\n    async resetAllSettings() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post('/api/settings/reset', {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation - reset to default values\n        this.fetchSettings();\n        this.resetDialog = false;\n        this.showSuccessMessage('All settings have been reset to defaults');\n      } catch (error) {\n        this.error = 'Failed to reset settings';\n        this.resetDialog = false;\n      }\n    },\n    async testNotifications() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post('/api/settings/notifications/test', {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.showSuccessMessage('Test notification sent successfully');\n      } catch (error) {\n        this.error = 'Failed to send test notification';\n      }\n    },\n    showSuccessMessage(message) {\n      this.successMessage = message;\n      this.showSuccessSnackbar = true;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.settings {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}