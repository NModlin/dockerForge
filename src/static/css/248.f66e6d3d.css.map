{"version":3,"file":"css/248.f66e6d3d.css","mappings":"AAwQA,+BACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/networks/NetworkList.vue"],"sourcesContent":["<template>\n  <div class=\"network-list\">\n    <h1 class=\"text-h4 mb-4\">Networks</h1>\n\n    <!-- Filters and Actions -->\n    <v-card class=\"mb-4\">\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\" sm=\"6\">\n            <v-text-field\n              v-model=\"filters.name\"\n              label=\"Filter by name\"\n              prepend-icon=\"mdi-magnify\"\n              clearable\n              @input=\"applyFilters\"\n            ></v-text-field>\n          </v-col>\n          <v-col cols=\"12\" sm=\"6\" class=\"d-flex align-center justify-end\">\n            <v-btn color=\"primary\" to=\"/networks/create\">\n              <v-icon left>mdi-plus</v-icon>\n              New Network\n            </v-btn>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Empty State -->\n    <v-card v-else-if=\"networks.length === 0\" class=\"mb-4 text-center pa-5\">\n      <v-icon size=\"64\" color=\"grey lighten-1\">mdi-lan</v-icon>\n      <h3 class=\"text-h5 mt-4\">No networks found</h3>\n      <p class=\"text-body-1 mt-2\">\n        {{ filters.name ? 'Try adjusting your filters' : 'Create your first network to get started' }}\n      </p>\n      <v-btn color=\"primary\" class=\"mt-4\" to=\"/networks/create\">\n        <v-icon left>mdi-plus</v-icon>\n        New Network\n      </v-btn>\n    </v-card>\n\n    <!-- Network List -->\n    <v-card v-else>\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"networks\"\n        :items-per-page=\"10\"\n        :footer-props=\"{\n          'items-per-page-options': [5, 10, 15, 20],\n        }\"\n        class=\"elevation-1\"\n      >\n        <!-- Name Column -->\n        <template v-slot:item.name=\"{ item }\">\n          <router-link :to=\"`/networks/${item.id}`\" class=\"text-decoration-none\">\n            {{ item.name }}\n          </router-link>\n        </template>\n\n        <!-- Scope Column -->\n        <template v-slot:item.scope=\"{ item }\">\n          <v-chip\n            :color=\"getScopeColor(item.scope)\"\n            text-color=\"white\"\n            small\n          >\n            {{ item.scope }}\n          </v-chip>\n        </template>\n\n        <!-- Created Column -->\n        <template v-slot:item.created_at=\"{ item }\">\n          {{ formatDate(item.created_at) }}\n        </template>\n\n        <!-- Actions Column -->\n        <template v-slot:item.actions=\"{ item }\">\n          <v-btn\n            icon\n            small\n            @click=\"showDeleteDialog(item)\"\n            title=\"Delete\"\n            :disabled=\"item.name === 'bridge' || item.name === 'host' || item.name === 'none'\"\n          >\n            <v-icon small>mdi-delete</v-icon>\n          </v-btn>\n        </template>\n      </v-data-table>\n    </v-card>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Network</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the network <strong>{{ selectedNetwork?.name }}</strong>?\n          This action cannot be undone.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteNetwork\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'NetworkList',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      networks: [],\n      filters: {\n        name: '',\n      },\n      headers: [\n        { text: 'Name', value: 'name', sortable: true },\n        { text: 'Driver', value: 'driver', sortable: true },\n        { text: 'Subnet', value: 'subnet', sortable: false },\n        { text: 'Scope', value: 'scope', sortable: true },\n        { text: 'Created', value: 'created_at', sortable: true },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      deleteDialog: false,\n      selectedNetwork: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchNetworks();\n  },\n  methods: {\n    async fetchNetworks() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get('/api/networks', {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        //   params: this.filters,\n        // });\n        // this.networks = response.data;\n\n        // Mock data for development\n        setTimeout(() => {\n          this.networks = [\n            {\n              id: 'n1',\n              name: 'bridge',\n              driver: 'bridge',\n              subnet: '172.17.0.0/16',\n              scope: 'local',\n              created_at: '2025-03-15T10:00:00Z',\n            },\n            {\n              id: 'n2',\n              name: 'host',\n              driver: 'host',\n              subnet: 'N/A',\n              scope: 'local',\n              created_at: '2025-03-15T10:00:00Z',\n            },\n            {\n              id: 'n3',\n              name: 'none',\n              driver: 'null',\n              subnet: 'N/A',\n              scope: 'local',\n              created_at: '2025-03-15T10:00:00Z',\n            },\n            {\n              id: 'n4',\n              name: 'app_network',\n              driver: 'bridge',\n              subnet: '172.18.0.0/16',\n              scope: 'local',\n              created_at: '2025-03-16T09:00:00Z',\n            },\n            {\n              id: 'n5',\n              name: 'overlay_network',\n              driver: 'overlay',\n              subnet: '10.0.0.0/24',\n              scope: 'swarm',\n              created_at: '2025-03-16T08:00:00Z',\n            },\n          ];\n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load networks. Please try again.';\n        this.loading = false;\n      }\n    },\n    applyFilters() {\n      this.fetchNetworks();\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    getScopeColor(scope) {\n      switch (scope) {\n        case 'swarm':\n          return 'purple';\n        case 'global':\n          return 'blue';\n        case 'local':\n        default:\n          return 'green';\n      }\n    },\n    showDeleteDialog(network) {\n      this.selectedNetwork = network;\n      this.deleteDialog = true;\n    },\n    async deleteNetwork() {\n      if (!this.selectedNetwork) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/networks/${this.selectedNetwork.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.networks = this.networks.filter(n => n.id !== this.selectedNetwork.id);\n        this.deleteDialog = false;\n        this.selectedNetwork = null;\n      } catch (error) {\n        this.error = `Failed to delete network ${this.selectedNetwork.name}`;\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.network-list {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}