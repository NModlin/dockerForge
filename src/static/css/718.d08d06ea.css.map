{"version":3,"file":"css/718.d08d06ea.css","mappings":"AAgUA,iCACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/containers/ContainerList.vue"],"sourcesContent":["<template>\n  <div class=\"container-list\">\n    <h1 class=\"text-h4 mb-4\">Containers</h1>\n\n    <!-- Filters and Actions -->\n    <v-card class=\"mb-4\">\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-text-field\n              v-model=\"filters.name\"\n              label=\"Filter by name\"\n              prepend-icon=\"mdi-magnify\"\n              clearable\n              @input=\"applyFilters\"\n            ></v-text-field>\n          </v-col>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-select\n              v-model=\"filters.status\"\n              :items=\"statusOptions\"\n              label=\"Filter by status\"\n              prepend-icon=\"mdi-filter\"\n              clearable\n              @change=\"applyFilters\"\n            ></v-select>\n          </v-col>\n          <v-col cols=\"12\" sm=\"4\" class=\"d-flex align-center justify-end\">\n            <v-btn color=\"primary\" to=\"/containers/create\">\n              <v-icon left>mdi-plus</v-icon>\n              New Container\n            </v-btn>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Empty State -->\n    <v-card v-else-if=\"containers.length === 0\" class=\"mb-4 text-center pa-5\">\n      <v-icon size=\"64\" color=\"grey lighten-1\">mdi-docker</v-icon>\n      <h3 class=\"text-h5 mt-4\">No containers found</h3>\n      <p class=\"text-body-1 mt-2\">\n        {{ filters.name || filters.status ? 'Try adjusting your filters' : 'Create your first container to get started' }}\n      </p>\n      <v-btn color=\"primary\" class=\"mt-4\" to=\"/containers/create\">\n        <v-icon left>mdi-plus</v-icon>\n        New Container\n      </v-btn>\n    </v-card>\n\n    <!-- Container List -->\n    <v-card v-else>\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"containers\"\n        :items-per-page=\"10\"\n        :footer-props=\"{\n          'items-per-page-options': [5, 10, 15, 20],\n        }\"\n        class=\"elevation-1\"\n      >\n        <!-- Name Column -->\n        <template v-slot:item.name=\"{ item }\">\n          <router-link :to=\"`/containers/${item.id}`\" class=\"text-decoration-none\">\n            {{ item.name }}\n          </router-link>\n        </template>\n\n        <!-- Status Column -->\n        <template v-slot:item.status=\"{ item }\">\n          <v-chip\n            :color=\"getStatusColor(item.status)\"\n            text-color=\"white\"\n            small\n          >\n            {{ item.status }}\n          </v-chip>\n        </template>\n\n        <!-- Health Column -->\n        <template v-slot:item.health_status=\"{ item }\">\n          <v-chip\n            v-if=\"item.health_status\"\n            :color=\"getHealthColor(item.health_status)\"\n            text-color=\"white\"\n            small\n          >\n            {{ item.health_status }}\n          </v-chip>\n          <span v-else>-</span>\n        </template>\n\n        <!-- Created Column -->\n        <template v-slot:item.created_at=\"{ item }\">\n          {{ formatDate(item.created_at) }}\n        </template>\n\n        <!-- Actions Column -->\n        <template v-slot:item.actions=\"{ item }\">\n          <v-btn\n            icon\n            small\n            :disabled=\"item.status === 'running'\"\n            @click=\"startContainer(item)\"\n            title=\"Start\"\n          >\n            <v-icon small>mdi-play</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            :disabled=\"item.status !== 'running'\"\n            @click=\"stopContainer(item)\"\n            title=\"Stop\"\n          >\n            <v-icon small>mdi-stop</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            :disabled=\"item.status !== 'running'\"\n            @click=\"restartContainer(item)\"\n            title=\"Restart\"\n          >\n            <v-icon small>mdi-restart</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            @click=\"showDeleteDialog(item)\"\n            title=\"Delete\"\n          >\n            <v-icon small>mdi-delete</v-icon>\n          </v-btn>\n        </template>\n      </v-data-table>\n    </v-card>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Container</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the container <strong>{{ selectedContainer?.name }}</strong>?\n          This action cannot be undone.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteContainer\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport axios from 'axios';\n\nexport default {\n  name: 'ContainerList',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      containers: [],\n      filters: {\n        name: '',\n        status: '',\n      },\n      statusOptions: [\n        { text: 'All', value: '' },\n        { text: 'Running', value: 'running' },\n        { text: 'Stopped', value: 'stopped' },\n        { text: 'Created', value: 'created' },\n        { text: 'Paused', value: 'paused' },\n      ],\n      headers: [\n        { text: 'Name', value: 'name', sortable: true },\n        { text: 'Image', value: 'image', sortable: true },\n        { text: 'Status', value: 'status', sortable: true },\n        { text: 'Health', value: 'health_status', sortable: true },\n        { text: 'Created', value: 'created_at', sortable: true },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      deleteDialog: false,\n      selectedContainer: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchContainers();\n  },\n  methods: {\n    async fetchContainers() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // Fetch containers from API\n        const containers = await this.$store.dispatch('containers/getContainers', this.filters);\n        this.containers = containers;\n      } catch (error) {\n        this.error = 'Failed to load containers. Please try again.';\n        console.error('Error fetching containers:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    applyFilters() {\n      this.fetchContainers();\n    },\n    getStatusColor(status) {\n      switch (status) {\n        case 'running':\n          return 'success';\n        case 'stopped':\n          return 'error';\n        case 'paused':\n          return 'warning';\n        case 'created':\n          return 'info';\n        default:\n          return 'grey';\n      }\n    },\n    getHealthColor(health) {\n      switch (health) {\n        case 'healthy':\n          return 'success';\n        case 'unhealthy':\n          return 'error';\n        case 'starting':\n          return 'warning';\n        default:\n          return 'grey';\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    async startContainer(container) {\n      try {\n        this.error = null;\n        await this.$store.dispatch('containers/startContainer', container.id);\n        // Refresh container list after action\n        this.fetchContainers();\n      } catch (error) {\n        this.error = `Failed to start container ${container.name}`;\n        console.error('Error starting container:', error);\n      }\n    },\n    async stopContainer(container) {\n      try {\n        this.error = null;\n        await this.$store.dispatch('containers/stopContainer', container.id);\n        // Refresh container list after action\n        this.fetchContainers();\n      } catch (error) {\n        this.error = `Failed to stop container ${container.name}`;\n        console.error('Error stopping container:', error);\n      }\n    },\n    async restartContainer(container) {\n      try {\n        this.error = null;\n        await this.$store.dispatch('containers/restartContainer', container.id);\n        // Refresh container list after action\n        this.fetchContainers();\n      } catch (error) {\n        this.error = `Failed to restart container ${container.name}`;\n        console.error('Error restarting container:', error);\n      }\n    },\n    showDeleteDialog(container) {\n      this.selectedContainer = container;\n      this.deleteDialog = true;\n    },\n    async deleteContainer() {\n      if (!this.selectedContainer) return;\n      \n      try {\n        this.error = null;\n        await this.$store.dispatch('containers/removeContainer', this.selectedContainer.id);\n        // After deletion is successful, close the dialog and refresh containers\n        this.deleteDialog = false;\n        this.selectedContainer = null;\n        this.fetchContainers();\n      } catch (error) {\n        this.error = `Failed to delete container ${this.selectedContainer.name}`;\n        console.error('Error deleting container:', error);\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container-list {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}