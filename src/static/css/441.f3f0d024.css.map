{"version":3,"file":"css/441.f3f0d024.css","mappings":"AAupBA,qCACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/security/SecurityDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"security-dashboard\">\n    <h1 class=\"text-h4 mb-4\">Security Dashboard</h1>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Dashboard Content -->\n    <template v-else>\n      <!-- Security Overview -->\n      <v-row>\n        <v-col cols=\"12\" md=\"4\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left :color=\"getSecurityScoreColor(securityScore)\">\n                mdi-shield\n              </v-icon>\n              Security Score\n            </v-card-title>\n            <v-card-text class=\"text-center\">\n              <v-progress-circular\n                :rotate=\"-90\"\n                :size=\"150\"\n                :width=\"15\"\n                :value=\"securityScore\"\n                :color=\"getSecurityScoreColor(securityScore)\"\n              >\n                <span class=\"text-h4\">{{ securityScore }}</span>\n              </v-progress-circular>\n              <div class=\"mt-4\">\n                <v-chip\n                  :color=\"getSecurityScoreColor(securityScore)\"\n                  text-color=\"white\"\n                >\n                  {{ getSecurityScoreLabel(securityScore) }}\n                </v-chip>\n              </div>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left color=\"error\">mdi-alert</v-icon>\n              Vulnerabilities\n            </v-card-title>\n            <v-card-text>\n              <v-row>\n                <v-col cols=\"4\" class=\"text-center\">\n                  <div class=\"text-h4 red--text\">{{ vulnerabilityCounts.critical }}</div>\n                  <div class=\"text-subtitle-1\">Critical</div>\n                </v-col>\n                <v-col cols=\"4\" class=\"text-center\">\n                  <div class=\"text-h4 orange--text\">{{ vulnerabilityCounts.high }}</div>\n                  <div class=\"text-subtitle-1\">High</div>\n                </v-col>\n                <v-col cols=\"4\" class=\"text-center\">\n                  <div class=\"text-h4 blue--text\">{{ vulnerabilityCounts.medium + vulnerabilityCounts.low }}</div>\n                  <div class=\"text-subtitle-1\">Other</div>\n                </v-col>\n              </v-row>\n              <v-btn\n                color=\"primary\"\n                block\n                class=\"mt-4\"\n                :to=\"'/security/vulnerabilities'\"\n              >\n                View All Vulnerabilities\n              </v-btn>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              <v-icon left color=\"warning\">mdi-check-decagram</v-icon>\n              Compliance\n            </v-card-title>\n            <v-card-text>\n              <v-row>\n                <v-col cols=\"6\" class=\"text-center\">\n                  <div class=\"text-h4\">{{ complianceStats.passed }}</div>\n                  <div class=\"text-subtitle-1 success--text\">Passed</div>\n                </v-col>\n                <v-col cols=\"6\" class=\"text-center\">\n                  <div class=\"text-h4\">{{ complianceStats.failed }}</div>\n                  <div class=\"text-subtitle-1 error--text\">Failed</div>\n                </v-col>\n              </v-row>\n              <v-progress-linear\n                :value=\"(complianceStats.passed / (complianceStats.passed + complianceStats.failed)) * 100\"\n                color=\"success\"\n                height=\"20\"\n                class=\"mt-2\"\n              >\n                <template v-slot:default>\n                  {{ Math.round((complianceStats.passed / (complianceStats.passed + complianceStats.failed)) * 100) }}%\n                </template>\n              </v-progress-linear>\n              <v-btn\n                color=\"primary\"\n                block\n                class=\"mt-4\"\n                :to=\"'/security/compliance'\"\n              >\n                View Compliance Report\n              </v-btn>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Recent Security Scans -->\n      <h2 class=\"text-h5 mb-3\">Recent Security Scans</h2>\n      <v-card class=\"mb-4\">\n        <v-data-table\n          :headers=\"scanHeaders\"\n          :items=\"recentScans\"\n          :items-per-page=\"5\"\n          class=\"elevation-1\"\n        >\n          <!-- Resource Column -->\n          <template v-slot:item.resource=\"{ item }\">\n            <router-link\n              :to=\"getResourceLink(item)\"\n              class=\"text-decoration-none\"\n            >\n              {{ item.resource_name }}\n            </router-link>\n            <v-chip\n              x-small\n              class=\"ml-2\"\n              :color=\"getResourceTypeColor(item.resource_type)\"\n            >\n              {{ item.resource_type }}\n            </v-chip>\n          </template>\n\n          <!-- Status Column -->\n          <template v-slot:item.status=\"{ item }\">\n            <v-chip\n              :color=\"getScanStatusColor(item.status)\"\n              text-color=\"white\"\n              small\n            >\n              {{ item.status }}\n            </v-chip>\n          </template>\n\n          <!-- Findings Column -->\n          <template v-slot:item.findings=\"{ item }\">\n            <v-chip\n              v-if=\"item.critical_count > 0\"\n              color=\"error\"\n              x-small\n              class=\"mr-1\"\n            >\n              {{ item.critical_count }} Critical\n            </v-chip>\n            <v-chip\n              v-if=\"item.high_count > 0\"\n              color=\"warning\"\n              x-small\n              class=\"mr-1\"\n            >\n              {{ item.high_count }} High\n            </v-chip>\n            <v-chip\n              v-if=\"item.medium_count > 0\"\n              color=\"info\"\n              x-small\n              class=\"mr-1\"\n            >\n              {{ item.medium_count }} Medium\n            </v-chip>\n            <span v-if=\"item.critical_count === 0 && item.high_count === 0 && item.medium_count === 0\">\n              No significant findings\n            </span>\n          </template>\n\n          <!-- Date Column -->\n          <template v-slot:item.scan_date=\"{ item }\">\n            {{ formatDate(item.scan_date) }}\n          </template>\n\n          <!-- Actions Column -->\n          <template v-slot:item.actions=\"{ item }\">\n            <v-btn\n              icon\n              small\n              :to=\"getScanDetailsLink(item)\"\n              title=\"View Details\"\n            >\n              <v-icon small>mdi-eye</v-icon>\n            </v-btn>\n            <v-btn\n              icon\n              small\n              @click=\"runNewScan(item)\"\n              title=\"Run New Scan\"\n              :disabled=\"item.status === 'in-progress'\"\n            >\n              <v-icon small>mdi-refresh</v-icon>\n            </v-btn>\n            <v-btn\n              icon\n              small\n              @click=\"resolveWithAI(item)\"\n              title=\"Resolve with AI\"\n              :disabled=\"item.status === 'in-progress' || item.critical_count === 0 && item.high_count === 0\"\n              color=\"primary\"\n            >\n              <v-icon small>mdi-robot</v-icon>\n            </v-btn>\n          </template>\n        </v-data-table>\n      </v-card>\n\n      <!-- Security Recommendations -->\n      <h2 class=\"text-h5 mb-3\">Security Recommendations</h2>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-expansion-panels>\n            <v-expansion-panel\n              v-for=\"(recommendation, i) in recommendations\"\n              :key=\"i\"\n            >\n              <v-expansion-panel-header>\n                <div class=\"d-flex align-center\">\n                  <v-icon\n                    :color=\"getRecommendationPriorityColor(recommendation.priority)\"\n                    class=\"mr-2\"\n                  >\n                    mdi-alert-circle\n                  </v-icon>\n                  <span>{{ recommendation.title }}</span>\n                  <v-chip\n                    class=\"ml-2\"\n                    x-small\n                    :color=\"getRecommendationPriorityColor(recommendation.priority)\"\n                    text-color=\"white\"\n                  >\n                    {{ recommendation.priority }}\n                  </v-chip>\n                </div>\n              </v-expansion-panel-header>\n              <v-expansion-panel-content>\n                <p>{{ recommendation.description }}</p>\n                <div v-if=\"recommendation.affected_resources.length > 0\">\n                  <strong>Affected Resources:</strong>\n                  <ul>\n                    <li v-for=\"(resource, j) in recommendation.affected_resources\" :key=\"j\">\n                      {{ resource.name }} ({{ resource.type }})\n                    </li>\n                  </ul>\n                </div>\n                <div class=\"d-flex mt-2\">\n                  <v-btn\n                    color=\"primary\"\n                    text\n                    class=\"mr-2\"\n                    @click=\"applyRecommendation(recommendation)\"\n                  >\n                    Apply Recommendation\n                  </v-btn>\n                  <v-btn\n                    color=\"info\"\n                    text\n                    @click=\"resolveRecommendationWithAI(recommendation)\"\n                  >\n                    <v-icon left small>mdi-robot</v-icon>\n                    Resolve with AI\n                  </v-btn>\n                </div>\n              </v-expansion-panel-content>\n            </v-expansion-panel>\n          </v-expansion-panels>\n        </v-col>\n      </v-row>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport axios from 'axios';\n\nexport default {\n  name: 'SecurityDashboard',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      securityScore: 0,\n      vulnerabilityCounts: {\n        critical: 0,\n        high: 0,\n        medium: 0,\n        low: 0,\n      },\n      complianceStats: {\n        passed: 0,\n        failed: 0,\n      },\n      scanHeaders: [\n        { text: 'Resource', value: 'resource', sortable: true },\n        { text: 'Status', value: 'status', sortable: true },\n        { text: 'Findings', value: 'findings', sortable: false },\n        { text: 'Scan Date', value: 'scan_date', sortable: true },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      recentScans: [],\n      recommendations: [],\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchSecurityData();\n  },\n  methods: {\n    ...mapActions({\n      setActive: 'chat/SET_ACTIVE',\n      updateContext: 'chat/updateContext'\n    }),\n    async fetchSecurityData() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get('/api/security/dashboard', {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.securityScore = response.data.security_score;\n        // this.vulnerabilityCounts = response.data.vulnerability_counts;\n        // this.complianceStats = response.data.compliance_stats;\n        // this.recentScans = response.data.recent_scans;\n        // this.recommendations = response.data.recommendations;\n        \n        // Mock data for development\n        setTimeout(() => {\n          this.securityScore = 78;\n          \n          this.vulnerabilityCounts = {\n            critical: 2,\n            high: 5,\n            medium: 12,\n            low: 23,\n          };\n          \n          this.complianceStats = {\n            passed: 42,\n            failed: 8,\n          };\n          \n          this.recentScans = [\n            {\n              id: 's1',\n              resource_type: 'image',\n              resource_id: 'i1',\n              resource_name: 'nginx:latest',\n              status: 'completed',\n              critical_count: 0,\n              high_count: 2,\n              medium_count: 5,\n              scan_date: '2025-03-16T10:00:00Z',\n            },\n            {\n              id: 's2',\n              resource_type: 'image',\n              resource_id: 'i2',\n              resource_name: 'postgres:13',\n              status: 'completed',\n              critical_count: 1,\n              high_count: 3,\n              medium_count: 7,\n              scan_date: '2025-03-16T09:30:00Z',\n            },\n            {\n              id: 's3',\n              resource_type: 'container',\n              resource_id: 'c1',\n              resource_name: 'web-server',\n              status: 'completed',\n              critical_count: 0,\n              high_count: 0,\n              medium_count: 0,\n              scan_date: '2025-03-16T09:00:00Z',\n            },\n            {\n              id: 's4',\n              resource_type: 'image',\n              resource_id: 'i3',\n              resource_name: 'node:14-alpine',\n              status: 'in-progress',\n              critical_count: 0,\n              high_count: 0,\n              medium_count: 0,\n              scan_date: '2025-03-16T08:45:00Z',\n            },\n            {\n              id: 's5',\n              resource_type: 'container',\n              resource_id: 'c3',\n              resource_name: 'database',\n              status: 'failed',\n              critical_count: 0,\n              high_count: 0,\n              medium_count: 0,\n              scan_date: '2025-03-16T08:30:00Z',\n            },\n          ];\n          \n          this.recommendations = [\n            {\n              id: 'r1',\n              title: 'Update nginx image to fix critical vulnerabilities',\n              description: 'The current nginx image has 2 critical vulnerabilities that can be fixed by updating to the latest version.',\n              priority: 'high',\n              affected_resources: [\n                { name: 'nginx:latest', type: 'image' },\n                { name: 'web-server', type: 'container' },\n              ],\n            },\n            {\n              id: 'r2',\n              title: 'Enable user namespace remapping',\n              description: 'User namespace remapping provides an additional layer of security by mapping container user IDs to a different range on the host.',\n              priority: 'medium',\n              affected_resources: [],\n            },\n            {\n              id: 'r3',\n              title: 'Apply security policy to restrict privileged containers',\n              description: 'Privileged containers have access to all host devices and can pose a security risk. Apply a security policy to restrict their usage.',\n              priority: 'high',\n              affected_resources: [\n                { name: 'database', type: 'container' },\n              ],\n            },\n            {\n              id: 'r4',\n              title: 'Configure network policies to restrict container communication',\n              description: 'Implement network policies to restrict communication between containers and limit exposure to potential attacks.',\n              priority: 'medium',\n              affected_resources: [],\n            },\n            {\n              id: 'r5',\n              title: 'Enable content trust for image verification',\n              description: 'Content trust ensures that the images you pull are signed and verified, reducing the risk of using compromised images.',\n              priority: 'medium',\n              affected_resources: [],\n            },\n          ];\n          \n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load security data. Please try again.';\n        this.loading = false;\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    getSecurityScoreColor(score) {\n      if (score >= 90) {\n        return 'success';\n      } else if (score >= 70) {\n        return 'warning';\n      } else {\n        return 'error';\n      }\n    },\n    getSecurityScoreLabel(score) {\n      if (score >= 90) {\n        return 'Good';\n      } else if (score >= 70) {\n        return 'Needs Improvement';\n      } else {\n        return 'At Risk';\n      }\n    },\n    getScanStatusColor(status) {\n      switch (status) {\n        case 'completed':\n          return 'success';\n        case 'in-progress':\n          return 'info';\n        case 'failed':\n          return 'error';\n        default:\n          return 'grey';\n      }\n    },\n    getResourceTypeColor(type) {\n      switch (type) {\n        case 'image':\n          return 'primary';\n        case 'container':\n          return 'success';\n        case 'volume':\n          return 'warning';\n        case 'network':\n          return 'info';\n        default:\n          return 'grey';\n      }\n    },\n    getRecommendationPriorityColor(priority) {\n      switch (priority) {\n        case 'critical':\n          return 'error';\n        case 'high':\n          return 'deep-orange';\n        case 'medium':\n          return 'warning';\n        case 'low':\n          return 'info';\n        default:\n          return 'grey';\n      }\n    },\n    getResourceLink(scan) {\n      switch (scan.resource_type) {\n        case 'image':\n          return `/images/${scan.resource_id}`;\n        case 'container':\n          return `/containers/${scan.resource_id}`;\n        case 'volume':\n          return `/volumes/${scan.resource_id}`;\n        case 'network':\n          return `/networks/${scan.resource_id}`;\n        default:\n          return '#';\n      }\n    },\n    getScanDetailsLink(scan) {\n      if (scan.resource_type === 'image') {\n        return `/images/${scan.resource_id}/security/${scan.id}`;\n      }\n      return `/security/scans/${scan.id}`;\n    },\n    runNewScan(scan) {\n      // In a real implementation, this would call the API to start a new scan\n      // await axios.post(`/api/security/scan`, {\n      //   resource_type: scan.resource_type,\n      //   resource_id: scan.resource_id,\n      // }, {\n      //   headers: { Authorization: `Bearer ${this.token}` },\n      // });\n      \n      // Mock implementation\n      this.$set(scan, 'status', 'in-progress');\n      this.$set(scan, 'scan_date', new Date().toISOString());\n      \n      // Simulate scan completion after 3 seconds\n      setTimeout(() => {\n        this.$set(scan, 'status', 'completed');\n      }, 3000);\n    },\n    async resolveWithAI(scan) {\n      try {\n        // Start a security workflow for the vulnerability\n        const response = await axios.post(`/api/chat/security/start-workflow?vulnerability_id=${scan.id}`);\n        \n        // Set context data for chat\n        this.updateContext({\n          currentPage: 'security',\n          currentContainerId: scan.resource_type === 'container' ? scan.resource_id : null,\n          currentImageId: scan.resource_type === 'image' ? scan.resource_id : null,\n          vulnerability_id: scan.id,\n          workflow_id: response.data.message.context?.workflow_id\n        });\n        \n        // Open chat sidebar\n        this.setActive(true);\n        \n        // Show notification\n        this.$emit('show-notification', {\n          type: 'info',\n          message: 'AI-assisted resolution workflow started. Check the chat sidebar.',\n        });\n      } catch (error) {\n        console.error('Error starting security workflow:', error);\n        this.$emit('show-notification', {\n          type: 'error',\n          message: 'Failed to start AI resolution workflow.',\n        });\n      }\n    },\n    \n    async resolveRecommendationWithAI(recommendation) {\n      try {\n        // Start a security workflow for the recommendation\n        const response = await axios.post(`/api/chat/security/start-workflow?vulnerability_id=${recommendation.id}`);\n        \n        // Prepare context with recommendation data\n        this.updateContext({\n          currentPage: 'security',\n          recommendation_id: recommendation.id,\n          workflow_id: response.data.message.context?.workflow_id\n        });\n        \n        // Open chat sidebar\n        this.setActive(true);\n        \n        // Show notification\n        this.$emit('show-notification', {\n          type: 'info',\n          message: 'AI-assisted resolution workflow started. Check the chat sidebar.',\n        });\n      } catch (error) {\n        console.error('Error starting recommendation workflow:', error);\n        this.$emit('show-notification', {\n          type: 'error',\n          message: 'Failed to start AI resolution workflow.',\n        });\n      }\n    },\n    \n    applyRecommendation(recommendation) {\n      // In a real implementation, this would call the API to apply the recommendation\n      // await axios.post(`/api/security/recommendations/${recommendation.id}/apply`, {}, {\n      //   headers: { Authorization: `Bearer ${this.token}` },\n      // });\n      \n      // Mock implementation - just show a notification\n      this.$emit('show-notification', {\n        type: 'success',\n        message: `Applied recommendation: ${recommendation.title}`,\n      });\n      \n      // Remove the recommendation from the list\n      this.recommendations = this.recommendations.filter(r => r.id !== recommendation.id);\n      \n      // Update security score\n      this.securityScore += 5;\n      if (this.securityScore > 100) {\n        this.securityScore = 100;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.security-dashboard {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}