{"version":3,"file":"css/949.540b0690.css","mappings":"AAwoBA,mCACE,YACF,CAEA,iCACE,gBAAiB,CACjB,eACF,CAEA,+BACE,QAAS,CACT,oBAAqB,CACrB,oBAAqB,CACrB,qBAAsB,CACtB,cAAe,CACf,eACF","sources":["webpack://dockerforge-web-ui/./src/views/containers/ContainerDetail.vue"],"sourcesContent":["<template>\n  <div class=\"container-detail\">\n    <div class=\"d-flex align-center mb-4\">\n      <v-btn icon class=\"mr-2\" to=\"/containers\">\n        <v-icon>mdi-arrow-left</v-icon>\n      </v-btn>\n      <h1 class=\"text-h4\">{{ loading ? 'Container Details' : container.name }}</h1>\n      <v-spacer></v-spacer>\n      <v-chip\n        v-if=\"container && container.status\"\n        :color=\"getStatusColor(container.status)\"\n        text-color=\"white\"\n        class=\"mr-2\"\n      >\n        {{ container.status }}\n      </v-chip>\n      <v-chip\n        v-if=\"container && container.health_status\"\n        :color=\"getHealthColor(container.health_status)\"\n        text-color=\"white\"\n      >\n        {{ container.health_status }}\n      </v-chip>\n    </div>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Container Details -->\n    <template v-else-if=\"container\">\n      <!-- Action Buttons -->\n      <v-card class=\"mb-4\">\n        <v-card-text>\n          <v-row>\n            <v-col cols=\"12\" sm=\"6\" md=\"3\">\n              <v-btn\n                block\n                color=\"success\"\n                :disabled=\"container.status === 'running'\"\n                @click=\"startContainer\"\n              >\n                <v-icon left>mdi-play</v-icon>\n                Start\n              </v-btn>\n            </v-col>\n            <v-col cols=\"12\" sm=\"6\" md=\"3\">\n              <v-btn\n                block\n                color=\"error\"\n                :disabled=\"container.status !== 'running'\"\n                @click=\"stopContainer\"\n              >\n                <v-icon left>mdi-stop</v-icon>\n                Stop\n              </v-btn>\n            </v-col>\n            <v-col cols=\"12\" sm=\"6\" md=\"3\">\n              <v-btn\n                block\n                color=\"warning\"\n                :disabled=\"container.status !== 'running'\"\n                @click=\"restartContainer\"\n              >\n                <v-icon left>mdi-restart</v-icon>\n                Restart\n              </v-btn>\n            </v-col>\n            <v-col cols=\"12\" sm=\"6\" md=\"3\">\n              <v-btn\n                block\n                color=\"error\"\n                outlined\n                @click=\"showDeleteDialog\"\n              >\n                <v-icon left>mdi-delete</v-icon>\n                Delete\n              </v-btn>\n            </v-col>\n          </v-row>\n        </v-card-text>\n      </v-card>\n\n      <!-- Basic Info -->\n      <v-card class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-information</v-icon>\n          Basic Information\n        </v-card-title>\n        <v-card-text>\n          <v-simple-table>\n            <template v-slot:default>\n              <tbody>\n                <tr>\n                  <td class=\"font-weight-bold\">ID</td>\n                  <td>{{ container.id }}</td>\n                </tr>\n                <tr>\n                  <td class=\"font-weight-bold\">Name</td>\n                  <td>{{ container.name }}</td>\n                </tr>\n                <tr>\n                  <td class=\"font-weight-bold\">Image</td>\n                  <td>{{ container.image }}</td>\n                </tr>\n                <tr>\n                  <td class=\"font-weight-bold\">Status</td>\n                  <td>\n                    <v-chip\n                      :color=\"getStatusColor(container.status)\"\n                      text-color=\"white\"\n                      small\n                    >\n                      {{ container.status }}\n                    </v-chip>\n                  </td>\n                </tr>\n                <tr v-if=\"container.health_status\">\n                  <td class=\"font-weight-bold\">Health</td>\n                  <td>\n                    <v-chip\n                      :color=\"getHealthColor(container.health_status)\"\n                      text-color=\"white\"\n                      small\n                    >\n                      {{ container.health_status }}\n                    </v-chip>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"font-weight-bold\">Created</td>\n                  <td>{{ formatDate(container.created_at) }}</td>\n                </tr>\n                <tr v-if=\"container.started_at\">\n                  <td class=\"font-weight-bold\">Started</td>\n                  <td>{{ formatDate(container.started_at) }}</td>\n                </tr>\n                <tr v-if=\"container.ip_address\">\n                  <td class=\"font-weight-bold\">IP Address</td>\n                  <td>{{ container.ip_address }}</td>\n                </tr>\n                <tr v-if=\"container.network\">\n                  <td class=\"font-weight-bold\">Network</td>\n                  <td>{{ container.network }}</td>\n                </tr>\n                <tr v-if=\"container.restart_policy\">\n                  <td class=\"font-weight-bold\">Restart Policy</td>\n                  <td>{{ container.restart_policy }}</td>\n                </tr>\n              </tbody>\n            </template>\n          </v-simple-table>\n        </v-card-text>\n      </v-card>\n\n      <!-- Resource Usage -->\n      <v-card v-if=\"container.resource_usage\" class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-chart-line</v-icon>\n          Resource Usage\n        </v-card-title>\n        <v-card-text>\n          <v-row>\n            <v-col cols=\"12\" md=\"6\">\n              <div class=\"mb-2\">\n                <div class=\"d-flex justify-space-between align-center\">\n                  <span>CPU Usage</span>\n                  <span>{{ container.resource_usage.cpu_percent }}%</span>\n                </div>\n                <v-progress-linear\n                  color=\"primary\"\n                  height=\"10\"\n                  rounded\n                  :value=\"container.resource_usage.cpu_percent\"\n                ></v-progress-linear>\n              </div>\n            </v-col>\n            <v-col cols=\"12\" md=\"6\">\n              <div class=\"mb-2\">\n                <div class=\"d-flex justify-space-between align-center\">\n                  <span>Memory Usage</span>\n                  <span>{{ container.resource_usage.memory_usage }} / {{ container.resource_usage.memory_limit }}</span>\n                </div>\n                <v-progress-linear\n                  color=\"info\"\n                  height=\"10\"\n                  rounded\n                  :value=\"container.resource_usage.memory_percent\"\n                ></v-progress-linear>\n              </div>\n            </v-col>\n          </v-row>\n        </v-card-text>\n      </v-card>\n\n      <!-- Ports -->\n      <v-card v-if=\"container.ports && container.ports.length > 0\" class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-lan-connect</v-icon>\n          Port Mappings\n        </v-card-title>\n        <v-card-text>\n          <v-simple-table>\n            <template v-slot:default>\n              <thead>\n                <tr>\n                  <th>Host IP</th>\n                  <th>Host Port</th>\n                  <th>Container Port</th>\n                  <th>Protocol</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(port, index) in container.ports\" :key=\"index\">\n                  <td>{{ port.host_ip || '0.0.0.0' }}</td>\n                  <td>{{ port.host_port }}</td>\n                  <td>{{ port.container_port }}</td>\n                  <td>{{ port.protocol }}</td>\n                </tr>\n              </tbody>\n            </template>\n          </v-simple-table>\n        </v-card-text>\n      </v-card>\n\n      <!-- Volumes -->\n      <v-card v-if=\"container.volumes && container.volumes.length > 0\" class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-database</v-icon>\n          Volume Mappings\n        </v-card-title>\n        <v-card-text>\n          <v-simple-table>\n            <template v-slot:default>\n              <thead>\n                <tr>\n                  <th>Host Path</th>\n                  <th>Container Path</th>\n                  <th>Mode</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(volume, index) in container.volumes\" :key=\"index\">\n                  <td>{{ volume.host_path }}</td>\n                  <td>{{ volume.container_path }}</td>\n                  <td>{{ volume.mode }}</td>\n                </tr>\n              </tbody>\n            </template>\n          </v-simple-table>\n        </v-card-text>\n      </v-card>\n\n      <!-- Environment Variables -->\n      <v-card v-if=\"container.environment && Object.keys(container.environment).length > 0\" class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-code-braces</v-icon>\n          Environment Variables\n        </v-card-title>\n        <v-card-text>\n          <v-simple-table>\n            <template v-slot:default>\n              <thead>\n                <tr>\n                  <th>Key</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(value, key) in container.environment\" :key=\"key\">\n                  <td>{{ key }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </tbody>\n            </template>\n          </v-simple-table>\n        </v-card-text>\n      </v-card>\n\n      <!-- Labels -->\n      <v-card v-if=\"container.labels && Object.keys(container.labels).length > 0\" class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-tag-multiple</v-icon>\n          Labels\n        </v-card-title>\n        <v-card-text>\n          <v-simple-table>\n            <template v-slot:default>\n              <thead>\n                <tr>\n                  <th>Key</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(value, key) in container.labels\" :key=\"key\">\n                  <td>{{ key }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </tbody>\n            </template>\n          </v-simple-table>\n        </v-card-text>\n      </v-card>\n\n      <!-- Logs -->\n      <v-card class=\"mb-4\">\n        <v-card-title>\n          <v-icon left>mdi-text</v-icon>\n          Logs\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"fetchLogs\">\n            <v-icon>mdi-refresh</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text>\n          <div v-if=\"logsLoading\" class=\"d-flex justify-center align-center my-5\">\n            <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n          </div>\n          <div v-else-if=\"logsError\" class=\"text-center red--text\">\n            {{ logsError }}\n          </div>\n          <div v-else-if=\"logs.length === 0\" class=\"text-center grey--text\">\n            No logs available\n          </div>\n          <v-sheet v-else class=\"logs-container pa-2\" color=\"grey lighten-4\" rounded>\n            <pre class=\"logs-content\">{{ logs.join('\\n') }}</pre>\n          </v-sheet>\n        </v-card-text>\n      </v-card>\n    </template>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Container</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the container <strong>{{ container?.name }}</strong>?\n          This action cannot be undone.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteContainer\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport axios from 'axios';\n\nexport default {\n  name: 'ContainerDetail',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      container: null,\n      logs: [],\n      logsLoading: false,\n      logsError: null,\n      deleteDialog: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n    containerId() {\n      return this.$route.params.id;\n    },\n  },\n  created() {\n    this.fetchContainer();\n    this.fetchLogs();\n  },\n  methods: {\n    async fetchContainer() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`/api/containers/${this.containerId}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.container = response.data;\n\n        // Mock data for development\n        setTimeout(() => {\n          if (this.containerId === 'c1') {\n            this.container = {\n              id: 'c1',\n              name: 'nginx',\n              image: 'nginx:latest',\n              status: 'running',\n              created_at: '2025-03-16T10:00:00Z',\n              started_at: '2025-03-16T10:01:00Z',\n              finished_at: null,\n              health_status: 'healthy',\n              ip_address: '172.17.0.2',\n              command: \"nginx -g 'daemon off;'\",\n              entrypoint: null,\n              environment: {\n                NGINX_HOST: 'example.com',\n                NGINX_PORT: '80',\n              },\n              ports: [\n                { host_ip: '0.0.0.0', host_port: 8080, container_port: 80, protocol: 'tcp' },\n              ],\n              volumes: [\n                { host_path: '/data', container_path: '/usr/share/nginx/html', mode: 'rw' },\n              ],\n              network: 'bridge',\n              restart_policy: 'unless-stopped',\n              labels: { 'com.example.description': 'Web server' },\n              resource_usage: {\n                cpu_percent: 0.5,\n                memory_usage: '10MB',\n                memory_limit: '100MB',\n                memory_percent: 10.0,\n              },\n            };\n          } else if (this.containerId === 'c2') {\n            this.container = {\n              id: 'c2',\n              name: 'redis',\n              image: 'redis:alpine',\n              status: 'running',\n              created_at: '2025-03-16T09:00:00Z',\n              started_at: '2025-03-16T09:01:00Z',\n              finished_at: null,\n              health_status: 'healthy',\n              ip_address: '172.17.0.3',\n              command: 'redis-server',\n              entrypoint: null,\n              environment: {},\n              ports: [\n                { host_ip: '0.0.0.0', host_port: 6379, container_port: 6379, protocol: 'tcp' },\n              ],\n              volumes: [\n                { host_path: '/data/redis', container_path: '/data', mode: 'rw' },\n              ],\n              network: 'bridge',\n              restart_policy: 'always',\n              labels: { 'com.example.description': 'Redis cache' },\n              resource_usage: {\n                cpu_percent: 0.2,\n                memory_usage: '5MB',\n                memory_limit: '50MB',\n                memory_percent: 10.0,\n              },\n            };\n          } else if (this.containerId === 'c3') {\n            this.container = {\n              id: 'c3',\n              name: 'postgres',\n              image: 'postgres:13',\n              status: 'stopped',\n              created_at: '2025-03-16T08:00:00Z',\n              started_at: '2025-03-16T08:01:00Z',\n              finished_at: '2025-03-16T08:30:00Z',\n              health_status: null,\n              ip_address: null,\n              command: 'postgres',\n              entrypoint: null,\n              environment: {\n                POSTGRES_USER: 'user',\n                POSTGRES_PASSWORD: 'password',\n                POSTGRES_DB: 'db',\n              },\n              ports: [\n                { host_ip: '0.0.0.0', host_port: 5432, container_port: 5432, protocol: 'tcp' },\n              ],\n              volumes: [\n                { host_path: '/data/postgres', container_path: '/var/lib/postgresql/data', mode: 'rw' },\n              ],\n              network: 'bridge',\n              restart_policy: 'no',\n              labels: { 'com.example.description': 'PostgreSQL database' },\n              resource_usage: null,\n            };\n          } else {\n            this.error = `Container with ID ${this.containerId} not found`;\n          }\n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load container details. Please try again.';\n        this.loading = false;\n      }\n    },\n    async fetchLogs() {\n      this.logsLoading = true;\n      this.logsError = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`/api/containers/${this.containerId}/logs`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.logs = response.data.logs;\n\n        // Mock data for development\n        setTimeout(() => {\n          this.logs = [\n            `2025-03-16T19:00:00.000Z Container ${this.containerId} started`,\n            `2025-03-16T19:00:01.000Z Container ${this.containerId} running`,\n            `2025-03-16T19:00:02.000Z Container ${this.containerId} healthy`,\n            `2025-03-16T19:00:03.000Z Container ${this.containerId} processing request`,\n            `2025-03-16T19:00:04.000Z Container ${this.containerId} request completed`,\n          ];\n          this.logsLoading = false;\n        }, 1000);\n      } catch (error) {\n        this.logsError = 'Failed to load container logs. Please try again.';\n        this.logsLoading = false;\n      }\n    },\n    getStatusColor(status) {\n      switch (status) {\n        case 'running':\n          return 'success';\n        case 'stopped':\n          return 'error';\n        case 'paused':\n          return 'warning';\n        case 'created':\n          return 'info';\n        default:\n          return 'grey';\n      }\n    },\n    getHealthColor(health) {\n      switch (health) {\n        case 'healthy':\n          return 'success';\n        case 'unhealthy':\n          return 'error';\n        case 'starting':\n          return 'warning';\n        default:\n          return 'grey';\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    async startContainer() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/containers/${this.containerId}/start`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.container.status = 'running';\n        this.container.started_at = new Date().toISOString();\n        this.container.finished_at = null;\n        this.container.health_status = 'starting';\n        this.container.ip_address = '172.17.0.2';\n        \n        // Simulate health check\n        setTimeout(() => {\n          this.container.health_status = 'healthy';\n          this.$forceUpdate();\n        }, 2000);\n      } catch (error) {\n        this.error = `Failed to start container ${this.container.name}`;\n      }\n    },\n    async stopContainer() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/containers/${this.containerId}/stop`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.container.status = 'stopped';\n        this.container.finished_at = new Date().toISOString();\n        this.container.health_status = null;\n        this.container.ip_address = null;\n        this.container.resource_usage = null;\n      } catch (error) {\n        this.error = `Failed to stop container ${this.container.name}`;\n      }\n    },\n    async restartContainer() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/containers/${this.containerId}/restart`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.container.status = 'running';\n        this.container.started_at = new Date().toISOString();\n        this.container.finished_at = null;\n        this.container.health_status = 'starting';\n        \n        // Simulate health check\n        setTimeout(() => {\n          this.container.health_status = 'healthy';\n          this.$forceUpdate();\n        }, 2000);\n      } catch (error) {\n        this.error = `Failed to restart container ${this.container.name}`;\n      }\n    },\n    showDeleteDialog() {\n      this.deleteDialog = true;\n    },\n    async deleteContainer() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/containers/${this.containerId}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.deleteDialog = false;\n        this.$router.push('/containers');\n      } catch (error) {\n        this.error = `Failed to delete container ${this.container.name}`;\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container-detail {\n  padding: 16px;\n}\n\n.logs-container {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.logs-content {\n  margin: 0;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  font-family: monospace;\n  font-size: 12px;\n  line-height: 1.5;\n}\n</style>\n"],"names":[],"sourceRoot":""}