{"version":3,"file":"css/722.ddaf6398.css","mappings":"AAuRA,gCACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/volumes/VolumeDetail.vue"],"sourcesContent":["<template>\n  <div class=\"volume-detail\">\n    <v-row>\n      <v-col cols=\"12\">\n        <v-btn text to=\"/volumes\" class=\"mb-4\">\n          <v-icon left>mdi-arrow-left</v-icon>\n          Back to Volumes\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Volume Not Found -->\n    <v-alert v-else-if=\"!volume\" type=\"warning\" class=\"mb-4\">\n      Volume not found\n    </v-alert>\n\n    <!-- Volume Details -->\n    <template v-else>\n      <v-row>\n        <v-col cols=\"12\" md=\"8\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              {{ volume.name }}\n              <v-spacer></v-spacer>\n              <v-btn\n                color=\"error\"\n                text\n                @click=\"showDeleteDialog\"\n              >\n                <v-icon left>mdi-delete</v-icon>\n                Delete\n              </v-btn>\n            </v-card-title>\n            <v-card-text>\n              <v-simple-table>\n                <template v-slot:default>\n                  <tbody>\n                    <tr>\n                      <td class=\"font-weight-bold\">ID</td>\n                      <td>{{ volume.id }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Driver</td>\n                      <td>{{ volume.driver }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Mount Point</td>\n                      <td>{{ volume.mountpoint }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Size</td>\n                      <td>{{ volume.size }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Created</td>\n                      <td>{{ formatDate(volume.created_at) }}</td>\n                    </tr>\n                    <tr v-if=\"volume.labels && Object.keys(volume.labels).length > 0\">\n                      <td class=\"font-weight-bold\">Labels</td>\n                      <td>\n                        <v-chip\n                          v-for=\"(value, key) in volume.labels\"\n                          :key=\"key\"\n                          class=\"mr-2 mb-2\"\n                          small\n                        >\n                          {{ key }}: {{ value }}\n                        </v-chip>\n                      </td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-simple-table>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <!-- Usage Stats -->\n          <v-card class=\"mb-4\">\n            <v-card-title>Usage</v-card-title>\n            <v-card-text>\n              <v-progress-linear\n                :value=\"usagePercentage\"\n                height=\"25\"\n                :color=\"usageColor\"\n                striped\n              >\n                <template v-slot:default>\n                  <strong>{{ usagePercentage }}%</strong>\n                </template>\n              </v-progress-linear>\n              <div class=\"mt-2 text-center\">\n                {{ volume.used || '0 B' }} / {{ volume.size || '0 B' }}\n              </div>\n            </v-card-text>\n          </v-card>\n\n          <!-- Connected Containers -->\n          <v-card>\n            <v-card-title>Connected Containers</v-card-title>\n            <v-card-text v-if=\"connectedContainers.length === 0\">\n              <p class=\"text-center\">No containers are using this volume</p>\n            </v-card-text>\n            <v-list v-else dense>\n              <v-list-item\n                v-for=\"container in connectedContainers\"\n                :key=\"container.id\"\n                :to=\"`/containers/${container.id}`\"\n              >\n                <v-list-item-icon>\n                  <v-icon\n                    :color=\"container.status === 'running' ? 'success' : 'grey'\"\n                  >\n                    mdi-docker\n                  </v-icon>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>{{ container.name }}</v-list-item-title>\n                  <v-list-item-subtitle>{{ container.status }}</v-list-item-subtitle>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-card>\n        </v-col>\n      </v-row>\n    </template>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Volume</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the volume <strong>{{ volume?.name }}</strong>?\n          This action cannot be undone and may result in data loss.\n          <v-alert\n            v-if=\"connectedContainers.length > 0\"\n            type=\"warning\"\n            class=\"mt-3\"\n            dense\n          >\n            This volume is currently used by {{ connectedContainers.length }} container(s).\n            Deleting it may cause those containers to malfunction.\n          </v-alert>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteVolume\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'VolumeDetail',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      volume: null,\n      connectedContainers: [],\n      deleteDialog: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n    usagePercentage() {\n      if (!this.volume || !this.volume.used || !this.volume.size) {\n        return 0;\n      }\n      \n      // This is a simplified calculation for demonstration\n      // In a real app, you'd parse the size strings and calculate properly\n      return Math.min(Math.round((parseInt(this.volume.used) / parseInt(this.volume.size)) * 100), 100);\n    },\n    usageColor() {\n      if (this.usagePercentage > 90) {\n        return 'error';\n      } else if (this.usagePercentage > 70) {\n        return 'warning';\n      } else {\n        return 'success';\n      }\n    },\n  },\n  created() {\n    this.fetchVolumeDetails();\n  },\n  methods: {\n    async fetchVolumeDetails() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`/api/volumes/${this.$route.params.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.volume = response.data;\n        \n        // Mock data for development\n        setTimeout(() => {\n          this.volume = {\n            id: this.$route.params.id,\n            name: 'postgres_data',\n            driver: 'local',\n            mountpoint: '/var/lib/docker/volumes/postgres_data/_data',\n            size: '1.2 GB',\n            used: '800 MB',\n            created_at: '2025-03-15T10:00:00Z',\n            labels: {\n              'com.example.description': 'PostgreSQL Data',\n              'com.example.environment': 'production',\n            },\n          };\n          \n          this.connectedContainers = [\n            {\n              id: 'c1',\n              name: 'postgres',\n              status: 'running',\n            },\n          ];\n          \n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load volume details. Please try again.';\n        this.loading = false;\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    showDeleteDialog() {\n      this.deleteDialog = true;\n    },\n    async deleteVolume() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/volumes/${this.volume.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Navigate back to volumes list\n        this.$router.push('/volumes');\n      } catch (error) {\n        this.error = `Failed to delete volume ${this.volume.name}`;\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.volume-detail {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}