{"version":3,"file":"css/339.07598704.css","mappings":"AA6SA,+BACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/compose/ComposeList.vue"],"sourcesContent":["<template>\n  <div class=\"compose-list\">\n    <h1 class=\"text-h4 mb-4\">Docker Compose</h1>\n\n    <!-- Filters and Actions -->\n    <v-card class=\"mb-4\">\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\" sm=\"6\">\n            <v-text-field\n              v-model=\"filters.name\"\n              label=\"Filter by name\"\n              prepend-icon=\"mdi-magnify\"\n              clearable\n              @input=\"applyFilters\"\n            ></v-text-field>\n          </v-col>\n          <v-col cols=\"12\" sm=\"6\" class=\"d-flex align-center justify-end\">\n            <v-btn color=\"primary\" to=\"/compose/create\">\n              <v-icon left>mdi-plus</v-icon>\n              New Compose Project\n            </v-btn>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Empty State -->\n    <v-card v-else-if=\"composeProjects.length === 0\" class=\"mb-4 text-center pa-5\">\n      <v-icon size=\"64\" color=\"grey lighten-1\">mdi-docker</v-icon>\n      <h3 class=\"text-h5 mt-4\">No compose projects found</h3>\n      <p class=\"text-body-1 mt-2\">\n        {{ filters.name ? 'Try adjusting your filters' : 'Create your first compose project to get started' }}\n      </p>\n      <v-btn color=\"primary\" class=\"mt-4\" to=\"/compose/create\">\n        <v-icon left>mdi-plus</v-icon>\n        New Compose Project\n      </v-btn>\n    </v-card>\n\n    <!-- Compose Projects List -->\n    <v-card v-else>\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"composeProjects\"\n        :items-per-page=\"10\"\n        :footer-props=\"{\n          'items-per-page-options': [5, 10, 15, 20],\n        }\"\n        class=\"elevation-1\"\n      >\n        <!-- Name Column -->\n        <template v-slot:item.name=\"{ item }\">\n          <router-link :to=\"`/compose/${item.id}`\" class=\"text-decoration-none\">\n            {{ item.name }}\n          </router-link>\n        </template>\n\n        <!-- Status Column -->\n        <template v-slot:item.status=\"{ item }\">\n          <v-chip\n            :color=\"getStatusColor(item.status)\"\n            text-color=\"white\"\n            small\n          >\n            {{ item.status }}\n          </v-chip>\n        </template>\n\n        <!-- Created Column -->\n        <template v-slot:item.created_at=\"{ item }\">\n          {{ formatDate(item.created_at) }}\n        </template>\n\n        <!-- Actions Column -->\n        <template v-slot:item.actions=\"{ item }\">\n          <v-btn\n            icon\n            small\n            :disabled=\"item.status === 'running'\"\n            @click=\"startComposeProject(item)\"\n            title=\"Start\"\n          >\n            <v-icon small>mdi-play</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            :disabled=\"item.status !== 'running'\"\n            @click=\"stopComposeProject(item)\"\n            title=\"Stop\"\n          >\n            <v-icon small>mdi-stop</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            @click=\"showDeleteDialog(item)\"\n            title=\"Delete\"\n          >\n            <v-icon small>mdi-delete</v-icon>\n          </v-btn>\n        </template>\n      </v-data-table>\n    </v-card>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Compose Project</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the compose project <strong>{{ selectedProject?.name }}</strong>?\n          <v-checkbox\n            v-model=\"deleteWithVolumes\"\n            label=\"Also remove associated volumes\"\n            class=\"mt-4\"\n          ></v-checkbox>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteComposeProject\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'ComposeList',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      composeProjects: [],\n      filters: {\n        name: '',\n      },\n      headers: [\n        { text: 'Name', value: 'name', sortable: true },\n        { text: 'Status', value: 'status', sortable: true },\n        { text: 'Services', value: 'service_count', sortable: true },\n        { text: 'Location', value: 'location', sortable: true },\n        { text: 'Created', value: 'created_at', sortable: true },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      deleteDialog: false,\n      selectedProject: null,\n      deleteWithVolumes: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchComposeProjects();\n  },\n  methods: {\n    async fetchComposeProjects() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get('/api/compose', {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        //   params: this.filters,\n        // });\n        // this.composeProjects = response.data;\n\n        // Mock data for development\n        setTimeout(() => {\n          this.composeProjects = [\n            {\n              id: 'c1',\n              name: 'web-app',\n              status: 'running',\n              service_count: 3,\n              location: '/home/user/projects/web-app',\n              created_at: '2025-03-15T10:00:00Z',\n            },\n            {\n              id: 'c2',\n              name: 'database-cluster',\n              status: 'stopped',\n              service_count: 2,\n              location: '/home/user/projects/database-cluster',\n              created_at: '2025-03-14T09:00:00Z',\n            },\n            {\n              id: 'c3',\n              name: 'monitoring-stack',\n              status: 'running',\n              service_count: 4,\n              location: '/home/user/projects/monitoring',\n              created_at: '2025-03-13T08:00:00Z',\n            },\n          ];\n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load compose projects. Please try again.';\n        this.loading = false;\n      }\n    },\n    applyFilters() {\n      this.fetchComposeProjects();\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    getStatusColor(status) {\n      switch (status) {\n        case 'running':\n          return 'success';\n        case 'stopped':\n          return 'error';\n        case 'partial':\n          return 'warning';\n        default:\n          return 'grey';\n      }\n    },\n    async startComposeProject(project) {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${project.id}/start`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        project.status = 'running';\n        this.$forceUpdate();\n      } catch (error) {\n        this.error = `Failed to start compose project ${project.name}`;\n      }\n    },\n    async stopComposeProject(project) {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/compose/${project.id}/stop`, {}, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        project.status = 'stopped';\n        this.$forceUpdate();\n      } catch (error) {\n        this.error = `Failed to stop compose project ${project.name}`;\n      }\n    },\n    showDeleteDialog(project) {\n      this.selectedProject = project;\n      this.deleteWithVolumes = false;\n      this.deleteDialog = true;\n    },\n    async deleteComposeProject() {\n      if (!this.selectedProject) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/compose/${this.selectedProject.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        //   params: { removeVolumes: this.deleteWithVolumes },\n        // });\n        \n        // Mock implementation\n        this.composeProjects = this.composeProjects.filter(p => p.id !== this.selectedProject.id);\n        this.deleteDialog = false;\n        this.selectedProject = null;\n      } catch (error) {\n        this.error = `Failed to delete compose project ${this.selectedProject.name}`;\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.compose-list {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}