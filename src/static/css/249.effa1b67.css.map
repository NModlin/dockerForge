{"version":3,"file":"css/249.effa1b67.css","mappings":"AAikBA,8BACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/backup/BackupList.vue"],"sourcesContent":["<template>\n  <div class=\"backup-list\">\n    <h1 class=\"text-h4 mb-4\">Backups</h1>\n\n    <!-- Filters and Actions -->\n    <v-card class=\"mb-4\">\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-text-field\n              v-model=\"filters.name\"\n              label=\"Filter by name\"\n              prepend-icon=\"mdi-magnify\"\n              clearable\n              @input=\"applyFilters\"\n            ></v-text-field>\n          </v-col>\n          <v-col cols=\"12\" sm=\"4\">\n            <v-select\n              v-model=\"filters.type\"\n              :items=\"backupTypeOptions\"\n              label=\"Filter by type\"\n              prepend-icon=\"mdi-filter\"\n              clearable\n              @change=\"applyFilters\"\n            ></v-select>\n          </v-col>\n          <v-col cols=\"12\" sm=\"4\" class=\"d-flex align-center justify-end\">\n            <v-btn color=\"primary\" @click=\"showCreateBackupDialog\">\n              <v-icon left>mdi-plus</v-icon>\n              Create Backup\n            </v-btn>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Empty State -->\n    <v-card v-else-if=\"backups.length === 0\" class=\"mb-4 text-center pa-5\">\n      <v-icon size=\"64\" color=\"grey lighten-1\">mdi-backup-restore</v-icon>\n      <h3 class=\"text-h5 mt-4\">No backups found</h3>\n      <p class=\"text-body-1 mt-2\">\n        {{ filters.name || filters.type ? 'Try adjusting your filters' : 'Create your first backup to protect your data' }}\n      </p>\n      <v-btn color=\"primary\" class=\"mt-4\" @click=\"showCreateBackupDialog\">\n        <v-icon left>mdi-plus</v-icon>\n        Create Backup\n      </v-btn>\n    </v-card>\n\n    <!-- Backup List -->\n    <v-card v-else>\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"backups\"\n        :items-per-page=\"10\"\n        :footer-props=\"{\n          'items-per-page-options': [5, 10, 15, 20],\n        }\"\n        class=\"elevation-1\"\n      >\n        <!-- Name Column -->\n        <template v-slot:item.name=\"{ item }\">\n          <div class=\"font-weight-medium\">{{ item.name }}</div>\n          <div class=\"text-caption\">{{ item.description }}</div>\n        </template>\n\n        <!-- Type Column -->\n        <template v-slot:item.type=\"{ item }\">\n          <v-chip\n            :color=\"getBackupTypeColor(item.type)\"\n            text-color=\"white\"\n            small\n          >\n            {{ item.type }}\n          </v-chip>\n        </template>\n\n        <!-- Status Column -->\n        <template v-slot:item.status=\"{ item }\">\n          <v-chip\n            :color=\"getStatusColor(item.status)\"\n            text-color=\"white\"\n            small\n          >\n            {{ item.status }}\n          </v-chip>\n        </template>\n\n        <!-- Size Column -->\n        <template v-slot:item.size=\"{ item }\">\n          {{ formatSize(item.size) }}\n        </template>\n\n        <!-- Created Column -->\n        <template v-slot:item.created_at=\"{ item }\">\n          {{ formatDate(item.created_at) }}\n        </template>\n\n        <!-- Actions Column -->\n        <template v-slot:item.actions=\"{ item }\">\n          <v-btn\n            icon\n            small\n            @click=\"showRestoreDialog(item)\"\n            title=\"Restore\"\n            :disabled=\"item.status !== 'completed'\"\n          >\n            <v-icon small>mdi-backup-restore</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            @click=\"downloadBackup(item)\"\n            title=\"Download\"\n            :disabled=\"item.status !== 'completed'\"\n          >\n            <v-icon small>mdi-download</v-icon>\n          </v-btn>\n          <v-btn\n            icon\n            small\n            @click=\"showDeleteDialog(item)\"\n            title=\"Delete\"\n          >\n            <v-icon small>mdi-delete</v-icon>\n          </v-btn>\n        </template>\n      </v-data-table>\n    </v-card>\n\n    <!-- Create Backup Dialog -->\n    <v-dialog v-model=\"createBackupDialog\" max-width=\"600\">\n      <v-card>\n        <v-card-title class=\"headline\">Create Backup</v-card-title>\n        <v-card-text>\n          <v-form ref=\"createBackupForm\" v-model=\"createBackupFormValid\">\n            <v-text-field\n              v-model=\"newBackup.name\"\n              label=\"Backup Name\"\n              :rules=\"[v => !!v || 'Name is required']\"\n              required\n            ></v-text-field>\n            \n            <v-textarea\n              v-model=\"newBackup.description\"\n              label=\"Description\"\n              rows=\"2\"\n            ></v-textarea>\n            \n            <v-select\n              v-model=\"newBackup.type\"\n              :items=\"backupTypeOptions\"\n              label=\"Backup Type\"\n              :rules=\"[v => !!v || 'Type is required']\"\n              required\n            ></v-select>\n            \n            <v-select\n              v-model=\"newBackup.resources\"\n              :items=\"resourceOptions\"\n              label=\"Resources to Backup\"\n              multiple\n              chips\n              :rules=\"[v => v.length > 0 || 'Select at least one resource']\"\n              required\n            ></v-select>\n            \n            <v-checkbox\n              v-model=\"newBackup.includeVolumes\"\n              label=\"Include volumes\"\n            ></v-checkbox>\n            \n            <v-checkbox\n              v-model=\"newBackup.compress\"\n              label=\"Compress backup\"\n            ></v-checkbox>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"createBackupDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn\n            color=\"primary\"\n            text\n            @click=\"createBackup\"\n            :disabled=\"!createBackupFormValid || creatingBackup\"\n            :loading=\"creatingBackup\"\n          >\n            Create\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Restore Backup Dialog -->\n    <v-dialog v-model=\"restoreDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Restore Backup</v-card-title>\n        <v-card-text>\n          Are you sure you want to restore the backup <strong>{{ selectedBackup?.name }}</strong>?\n          <v-alert\n            type=\"warning\"\n            class=\"mt-3\"\n            dense\n          >\n            This will replace your current data with the backup data. This action cannot be undone.\n          </v-alert>\n          \n          <v-checkbox\n            v-model=\"restoreOptions.includeVolumes\"\n            label=\"Restore volumes\"\n            class=\"mt-4\"\n          ></v-checkbox>\n          \n          <v-checkbox\n            v-model=\"restoreOptions.stopContainers\"\n            label=\"Stop running containers before restore\"\n            class=\"mt-2\"\n          ></v-checkbox>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"restoreDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn\n            color=\"warning\"\n            text\n            @click=\"restoreBackup\"\n            :loading=\"restoringBackup\"\n          >\n            Restore\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Backup</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the backup <strong>{{ selectedBackup?.name }}</strong>?\n          This action cannot be undone.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteBackup\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'BackupList',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      backups: [],\n      filters: {\n        name: '',\n        type: '',\n      },\n      backupTypeOptions: [\n        { text: 'All', value: '' },\n        { text: 'Full', value: 'full' },\n        { text: 'Containers', value: 'containers' },\n        { text: 'Images', value: 'images' },\n        { text: 'Volumes', value: 'volumes' },\n        { text: 'Configuration', value: 'config' },\n      ],\n      resourceOptions: [\n        'All Containers',\n        'All Images',\n        'All Volumes',\n        'All Networks',\n        'Docker Configuration',\n      ],\n      headers: [\n        { text: 'Name', value: 'name', sortable: true },\n        { text: 'Type', value: 'type', sortable: true },\n        { text: 'Status', value: 'status', sortable: true },\n        { text: 'Size', value: 'size', sortable: true },\n        { text: 'Created', value: 'created_at', sortable: true },\n        { text: 'Actions', value: 'actions', sortable: false, align: 'center' },\n      ],\n      createBackupDialog: false,\n      createBackupFormValid: false,\n      creatingBackup: false,\n      newBackup: {\n        name: '',\n        description: '',\n        type: 'full',\n        resources: ['All Containers'],\n        includeVolumes: true,\n        compress: true,\n      },\n      restoreDialog: false,\n      restoringBackup: false,\n      restoreOptions: {\n        includeVolumes: true,\n        stopContainers: true,\n      },\n      deleteDialog: false,\n      selectedBackup: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n  },\n  created() {\n    this.fetchBackups();\n  },\n  methods: {\n    async fetchBackups() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get('/api/backups', {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        //   params: this.filters,\n        // });\n        // this.backups = response.data;\n\n        // Mock data for development\n        setTimeout(() => {\n          this.backups = [\n            {\n              id: 'b1',\n              name: 'Weekly Full Backup',\n              description: 'Automated weekly backup of all resources',\n              type: 'full',\n              status: 'completed',\n              size: 1024 * 1024 * 1024 * 2.5, // 2.5 GB\n              created_at: '2025-03-16T00:00:00Z',\n            },\n            {\n              id: 'b2',\n              name: 'Pre-deployment Backup',\n              description: 'Manual backup before major deployment',\n              type: 'containers',\n              status: 'completed',\n              size: 1024 * 1024 * 512, // 512 MB\n              created_at: '2025-03-15T12:00:00Z',\n            },\n            {\n              id: 'b3',\n              name: 'Database Volumes',\n              description: 'Backup of database volumes only',\n              type: 'volumes',\n              status: 'completed',\n              size: 1024 * 1024 * 1024 * 1.2, // 1.2 GB\n              created_at: '2025-03-14T08:00:00Z',\n            },\n            {\n              id: 'b4',\n              name: 'Configuration Backup',\n              description: 'Docker daemon and container configurations',\n              type: 'config',\n              status: 'completed',\n              size: 1024 * 1024 * 5, // 5 MB\n              created_at: '2025-03-13T16:00:00Z',\n            },\n            {\n              id: 'b5',\n              name: 'Image Repository',\n              description: 'Backup of all local images',\n              type: 'images',\n              status: 'in-progress',\n              size: 0,\n              created_at: '2025-03-17T05:30:00Z',\n            },\n          ];\n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load backups. Please try again.';\n        this.loading = false;\n      }\n    },\n    applyFilters() {\n      this.fetchBackups();\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    formatSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      \n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      \n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    getBackupTypeColor(type) {\n      switch (type) {\n        case 'full':\n          return 'primary';\n        case 'containers':\n          return 'success';\n        case 'images':\n          return 'info';\n        case 'volumes':\n          return 'warning';\n        case 'config':\n          return 'purple';\n        default:\n          return 'grey';\n      }\n    },\n    getStatusColor(status) {\n      switch (status) {\n        case 'completed':\n          return 'success';\n        case 'in-progress':\n          return 'info';\n        case 'failed':\n          return 'error';\n        default:\n          return 'grey';\n      }\n    },\n    showCreateBackupDialog() {\n      this.newBackup = {\n        name: '',\n        description: '',\n        type: 'full',\n        resources: ['All Containers'],\n        includeVolumes: true,\n        compress: true,\n      };\n      this.createBackupDialog = true;\n    },\n    async createBackup() {\n      if (!this.$refs.createBackupForm.validate()) return;\n      \n      this.creatingBackup = true;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.post('/api/backups', this.newBackup, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        setTimeout(() => {\n          const newBackupId = `b${this.backups.length + 1}`;\n          const now = new Date().toISOString();\n          \n          this.backups.unshift({\n            id: newBackupId,\n            name: this.newBackup.name,\n            description: this.newBackup.description,\n            type: this.newBackup.type,\n            status: 'in-progress',\n            size: 0,\n            created_at: now,\n          });\n          \n          // Simulate backup completion after 3 seconds\n          setTimeout(() => {\n            const index = this.backups.findIndex(b => b.id === newBackupId);\n            if (index !== -1) {\n              this.backups[index].status = 'completed';\n              this.backups[index].size = Math.random() * 1024 * 1024 * 1024 * 3; // Random size up to 3 GB\n              this.$forceUpdate();\n            }\n          }, 3000);\n          \n          this.createBackupDialog = false;\n          this.creatingBackup = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to create backup. Please try again.';\n        this.creatingBackup = false;\n      }\n    },\n    showRestoreDialog(backup) {\n      this.selectedBackup = backup;\n      this.restoreOptions = {\n        includeVolumes: true,\n        stopContainers: true,\n      };\n      this.restoreDialog = true;\n    },\n    async restoreBackup() {\n      this.restoringBackup = true;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.post(`/api/backups/${this.selectedBackup.id}/restore`, this.restoreOptions, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        setTimeout(() => {\n          this.restoreDialog = false;\n          this.restoringBackup = false;\n          \n          // Show success message\n          this.$emit('show-notification', {\n            type: 'success',\n            message: `Backup ${this.selectedBackup.name} restored successfully`,\n          });\n        }, 2000);\n      } catch (error) {\n        this.error = `Failed to restore backup ${this.selectedBackup.name}`;\n        this.restoringBackup = false;\n      }\n    },\n    downloadBackup(backup) {\n      // In a real implementation, this would trigger a file download\n      // window.location.href = `/api/backups/${backup.id}/download?token=${this.token}`;\n      \n      // Mock implementation - just show a notification\n      this.$emit('show-notification', {\n        type: 'info',\n        message: `Downloading backup: ${backup.name} (${this.formatSize(backup.size)})`,\n      });\n    },\n    showDeleteDialog(backup) {\n      this.selectedBackup = backup;\n      this.deleteDialog = true;\n    },\n    async deleteBackup() {\n      if (!this.selectedBackup) return;\n      \n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/backups/${this.selectedBackup.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Mock implementation\n        this.backups = this.backups.filter(b => b.id !== this.selectedBackup.id);\n        this.deleteDialog = false;\n        this.selectedBackup = null;\n      } catch (error) {\n        this.error = `Failed to delete backup ${this.selectedBackup.name}`;\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.backup-list {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}