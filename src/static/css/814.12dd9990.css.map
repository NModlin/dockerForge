{"version":3,"file":"css/814.12dd9990.css","mappings":"AAgXA,iCACE,YACF","sources":["webpack://dockerforge-web-ui/./src/views/networks/NetworkDetail.vue"],"sourcesContent":["<template>\n  <div class=\"network-detail\">\n    <v-row>\n      <v-col cols=\"12\">\n        <v-btn text to=\"/networks\" class=\"mb-4\">\n          <v-icon left>mdi-arrow-left</v-icon>\n          Back to Networks\n        </v-btn>\n      </v-col>\n    </v-row>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"d-flex justify-center align-center my-5\">\n      <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\n    </div>\n\n    <!-- Error State -->\n    <v-alert v-else-if=\"error\" type=\"error\" class=\"mb-4\">\n      {{ error }}\n    </v-alert>\n\n    <!-- Network Not Found -->\n    <v-alert v-else-if=\"!network\" type=\"warning\" class=\"mb-4\">\n      Network not found\n    </v-alert>\n\n    <!-- Network Details -->\n    <template v-else>\n      <v-row>\n        <v-col cols=\"12\" md=\"8\">\n          <v-card class=\"mb-4\">\n            <v-card-title class=\"headline\">\n              {{ network.name }}\n              <v-chip\n                class=\"ml-2\"\n                :color=\"getScopeColor(network.scope)\"\n                text-color=\"white\"\n                small\n              >\n                {{ network.scope }}\n              </v-chip>\n              <v-spacer></v-spacer>\n              <v-btn\n                color=\"error\"\n                text\n                @click=\"showDeleteDialog\"\n                :disabled=\"isDefaultNetwork\"\n              >\n                <v-icon left>mdi-delete</v-icon>\n                Delete\n              </v-btn>\n            </v-card-title>\n            <v-card-text>\n              <v-simple-table>\n                <template v-slot:default>\n                  <tbody>\n                    <tr>\n                      <td class=\"font-weight-bold\">ID</td>\n                      <td>{{ network.id }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Driver</td>\n                      <td>{{ network.driver }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Subnet</td>\n                      <td>{{ network.subnet }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Gateway</td>\n                      <td>{{ network.gateway || 'N/A' }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">IP Range</td>\n                      <td>{{ network.ip_range || 'N/A' }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Internal</td>\n                      <td>{{ network.internal ? 'Yes' : 'No' }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"font-weight-bold\">Created</td>\n                      <td>{{ formatDate(network.created_at) }}</td>\n                    </tr>\n                    <tr v-if=\"network.labels && Object.keys(network.labels).length > 0\">\n                      <td class=\"font-weight-bold\">Labels</td>\n                      <td>\n                        <v-chip\n                          v-for=\"(value, key) in network.labels\"\n                          :key=\"key\"\n                          class=\"mr-2 mb-2\"\n                          small\n                        >\n                          {{ key }}: {{ value }}\n                        </v-chip>\n                      </td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-simple-table>\n            </v-card-text>\n          </v-card>\n\n          <!-- Network Options -->\n          <v-card v-if=\"network.options && Object.keys(network.options).length > 0\" class=\"mb-4\">\n            <v-card-title>Network Options</v-card-title>\n            <v-card-text>\n              <v-simple-table>\n                <template v-slot:default>\n                  <thead>\n                    <tr>\n                      <th>Option</th>\n                      <th>Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr v-for=\"(value, key) in network.options\" :key=\"key\">\n                      <td>{{ key }}</td>\n                      <td>{{ value }}</td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-simple-table>\n            </v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <!-- Connected Containers -->\n          <v-card>\n            <v-card-title>Connected Containers</v-card-title>\n            <v-card-text v-if=\"connectedContainers.length === 0\">\n              <p class=\"text-center\">No containers are connected to this network</p>\n            </v-card-text>\n            <v-list v-else dense>\n              <v-list-item\n                v-for=\"container in connectedContainers\"\n                :key=\"container.id\"\n                :to=\"`/containers/${container.id}`\"\n              >\n                <v-list-item-icon>\n                  <v-icon\n                    :color=\"container.status === 'running' ? 'success' : 'grey'\"\n                  >\n                    mdi-docker\n                  </v-icon>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>{{ container.name }}</v-list-item-title>\n                  <v-list-item-subtitle>\n                    {{ container.ip_address || 'No IP assigned' }}\n                  </v-list-item-subtitle>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-card>\n        </v-col>\n      </v-row>\n    </template>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Network</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete the network <strong>{{ network?.name }}</strong>?\n          This action cannot be undone.\n          <v-alert\n            v-if=\"connectedContainers.length > 0\"\n            type=\"warning\"\n            class=\"mt-3\"\n            dense\n          >\n            This network is currently used by {{ connectedContainers.length }} container(s).\n            Deleting it may cause those containers to lose connectivity.\n          </v-alert>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"grey darken-1\" text @click=\"deleteDialog = false\">\n            Cancel\n          </v-btn>\n          <v-btn color=\"red darken-1\" text @click=\"deleteNetwork\">\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'NetworkDetail',\n  data() {\n    return {\n      loading: true,\n      error: null,\n      network: null,\n      connectedContainers: [],\n      deleteDialog: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      isAuthenticated: 'auth/isAuthenticated',\n      token: 'auth/token',\n    }),\n    isDefaultNetwork() {\n      if (!this.network) return false;\n      return ['bridge', 'host', 'none'].includes(this.network.name);\n    },\n  },\n  created() {\n    this.fetchNetworkDetails();\n  },\n  methods: {\n    async fetchNetworkDetails() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`/api/networks/${this.$route.params.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        // this.network = response.data;\n        \n        // Mock data for development\n        setTimeout(() => {\n          // Simulate different networks based on the ID parameter\n          if (this.$route.params.id === 'n1') {\n            this.network = {\n              id: 'n1',\n              name: 'bridge',\n              driver: 'bridge',\n              subnet: '172.17.0.0/16',\n              gateway: '172.17.0.1',\n              scope: 'local',\n              internal: false,\n              created_at: '2025-03-15T10:00:00Z',\n              options: {\n                'com.docker.network.bridge.default_bridge': 'true',\n                'com.docker.network.bridge.enable_icc': 'true',\n                'com.docker.network.bridge.enable_ip_masquerade': 'true',\n                'com.docker.network.bridge.host_binding_ipv4': '0.0.0.0',\n                'com.docker.network.bridge.name': 'docker0',\n                'com.docker.network.driver.mtu': '1500',\n              },\n            };\n            \n            this.connectedContainers = [\n              {\n                id: 'c1',\n                name: 'nginx',\n                status: 'running',\n                ip_address: '172.17.0.2',\n              },\n              {\n                id: 'c2',\n                name: 'redis',\n                status: 'running',\n                ip_address: '172.17.0.3',\n              },\n            ];\n          } else if (this.$route.params.id === 'n4') {\n            this.network = {\n              id: 'n4',\n              name: 'app_network',\n              driver: 'bridge',\n              subnet: '172.18.0.0/16',\n              gateway: '172.18.0.1',\n              scope: 'local',\n              internal: false,\n              created_at: '2025-03-16T09:00:00Z',\n              labels: {\n                'com.example.environment': 'development',\n                'com.example.project': 'dockerforge',\n              },\n            };\n            \n            this.connectedContainers = [\n              {\n                id: 'c3',\n                name: 'postgres',\n                status: 'stopped',\n                ip_address: '172.18.0.2',\n              },\n            ];\n          } else if (this.$route.params.id === 'n5') {\n            this.network = {\n              id: 'n5',\n              name: 'overlay_network',\n              driver: 'overlay',\n              subnet: '10.0.0.0/24',\n              gateway: '10.0.0.1',\n              scope: 'swarm',\n              internal: false,\n              created_at: '2025-03-16T08:00:00Z',\n              options: {\n                'com.docker.network.driver.overlay.vxlanid_list': '4097',\n                'com.docker.network.driver.overlay.mtu': '1450',\n              },\n            };\n            \n            this.connectedContainers = [];\n          } else {\n            // Default network for any other ID\n            this.network = {\n              id: this.$route.params.id,\n              name: 'unknown_network',\n              driver: 'bridge',\n              subnet: '192.168.0.0/24',\n              gateway: '192.168.0.1',\n              scope: 'local',\n              internal: false,\n              created_at: '2025-03-16T00:00:00Z',\n            };\n            \n            this.connectedContainers = [];\n          }\n          \n          this.loading = false;\n        }, 1000);\n      } catch (error) {\n        this.error = 'Failed to load network details. Please try again.';\n        this.loading = false;\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    getScopeColor(scope) {\n      switch (scope) {\n        case 'swarm':\n          return 'purple';\n        case 'global':\n          return 'blue';\n        case 'local':\n        default:\n          return 'green';\n      }\n    },\n    showDeleteDialog() {\n      this.deleteDialog = true;\n    },\n    async deleteNetwork() {\n      try {\n        // In a real implementation, this would call the API\n        // await axios.delete(`/api/networks/${this.network.id}`, {\n        //   headers: { Authorization: `Bearer ${this.token}` },\n        // });\n        \n        // Navigate back to networks list\n        this.$router.push('/networks');\n      } catch (error) {\n        this.error = `Failed to delete network ${this.network.name}`;\n        this.deleteDialog = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.network-detail {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}