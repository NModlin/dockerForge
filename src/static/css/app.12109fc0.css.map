{"version":3,"file":"css/app.12109fc0.css","mappings":"AAkLA,+BACE,YAAa,CACb,kBAAmB,CACnB,sBACF,CAEA,uCACE,iBAAkB,CAClB,aACF,CAEA,wCACE,wBAAyB,CACzB,iBAAkB,CAClB,iBAAkB,CAClB,aAAc,CACd,mCACF,CAEA,4DACE,wBACF,CAEA,qCACE,eAAgB,CAChB,eAAiB,CACjB,iBAAkB,CAClB,oBACF,CAEA,qCACE,oBAAqB,CACrB,qBACF,CAEA,qCACE,eAAiB,CACjB,oBAAyB,CACzB,gBAAiB,CACjB,cACF,CAOA,4FACE,cACF,CAGA,qDACE,wBACF,CAEA,yEACE,wBACF,CAEA,kDACE,wBACF,CAEA,kDACE,wBACF,CCzEA,6BACE,YAAa,CACb,mCAAwC,CACxC,qBAAsB,CACtB,iBACF,CAEA,0CACE,wBAAyB,CACzB,uCACF,CAEA,mCACE,kBACF,CAGA,yCACE,gBAAiB,CACjB,eACF,CCuEA,mEACE,kBACF,CCwFA,+BACE,YAAa,CACb,qBACF,CAEA,0CACE,MAAO,CACP,eAAgB,CAChB,iBACF,CAEA,gCACE,WAAY,CACZ,eAAgB,CAChB,gBAAiB,CACjB,mBACF,CAEA,mCACE,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CACvB,WAAY,CACZ,YACF,CAEA,wCACE,oCAAyC,CACzC,wBACF,CAEA,qDACE,wCAA+C,CAC/C,wBACF,CAEA,uCACE,iBAAkB,CAClB,SACF,CAGA,mDACE,SACF,CAEA,yDACE,sBACF,CAEA,yDACE,+BAAoC,CACpC,iBACF,CAEA,sEACE,mCACF,CCnLA,4BACE,YACF","sources":["webpack://dockerforge-web-ui/./src/components/chat/ChatMessage.vue","webpack://dockerforge-web-ui/./src/components/chat/ChatInput.vue","webpack://dockerforge-web-ui/./src/components/chat/ChatPreferences.vue","webpack://dockerforge-web-ui/./src/components/chat/ChatSidebar.vue","webpack://dockerforge-web-ui/./src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div :class=\"['chat-message', `chat-message--${message.type}`]\">\n    <div class=\"chat-message__avatar\" v-if=\"message.type === 'ai'\">\n      <v-avatar color=\"primary\" size=\"36\">\n        <v-icon dark>mdi-robot</v-icon>\n      </v-avatar>\n    </div>\n    <div class=\"chat-message__avatar\" v-else-if=\"message.type === 'user'\">\n      <v-avatar color=\"grey lighten-1\" size=\"36\">\n        <v-icon dark>mdi-account</v-icon>\n      </v-avatar>\n    </div>\n    <div class=\"chat-message__content\">\n      <div class=\"chat-message__name\" v-if=\"message.type === 'ai'\">DockerForge AI</div>\n      <div class=\"chat-message__name\" v-else-if=\"message.type === 'user'\">You</div>\n      <div class=\"chat-message__text\">{{ message.text }}</div>\n      <div class=\"chat-message__time\">{{ formattedTime }}</div>\n      \n      <!-- Phase 7: Message feedback UI (only for AI messages) -->\n      <div class=\"chat-message__feedback\" v-if=\"message.type === 'ai' && !feedbackSubmitted\">\n        <v-divider class=\"my-2\"></v-divider>\n        <div class=\"text-caption text-center mb-1\">Was this response helpful?</div>\n        <div class=\"d-flex justify-center\">\n          <v-rating\n            v-model=\"feedbackRating\"\n            color=\"amber\"\n            hover\n            dense\n            half-increments\n            size=\"small\"\n            length=\"5\"\n            @input=\"onRatingChange\"\n          ></v-rating>\n        </div>\n        <div v-if=\"feedbackRating && feedbackRating <= 3\" class=\"mt-2\">\n          <v-textarea\n            v-model=\"feedbackText\"\n            rows=\"2\"\n            dense\n            hide-details\n            placeholder=\"Please tell us how we can improve\"\n            class=\"text-caption\"\n          ></v-textarea>\n          <div class=\"d-flex justify-end mt-1\">\n            <v-btn\n              x-small\n              text\n              color=\"primary\"\n              @click=\"submitFeedback\"\n              :disabled=\"submittingFeedback\"\n            >\n              Submit Feedback\n              <v-progress-circular\n                v-if=\"submittingFeedback\"\n                indeterminate\n                size=\"16\"\n                class=\"ml-2\"\n              ></v-progress-circular>\n            </v-btn>\n          </div>\n        </div>\n      </div>\n      <div class=\"chat-message__feedback-submitted\" v-else-if=\"message.type === 'ai' && feedbackSubmitted\">\n        <v-divider class=\"my-2\"></v-divider>\n        <div class=\"text-caption text-center\">\n          <v-icon small color=\"success\">mdi-check-circle</v-icon>\n          Thank you for your feedback!\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ChatMessage',\n  props: {\n    message: {\n      type: Object,\n      required: true,\n      validator: (prop) => {\n        return prop.type && prop.text && prop.timestamp;\n      }\n    },\n    // Phase 7: Pass existing feedback to avoid duplicates\n    existingFeedback: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      // Phase 7: Feedback data\n      feedbackRating: 0,\n      feedbackText: '',\n      feedbackSubmitted: !!this.existingFeedback,\n      submittingFeedback: false\n    }\n  },\n  computed: {\n    formattedTime() {\n      const date = new Date(this.message.timestamp);\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    }\n  },\n  methods: {\n    // Phase 7: Handle rating change\n    onRatingChange(value) {\n      if (value >= 4) {\n        // For high ratings, automatically submit without text\n        this.submitFeedback();\n      }\n    },\n    \n    // Phase 7: Submit feedback\n    async submitFeedback() {\n      if (!this.feedbackRating) return;\n      \n      this.submittingFeedback = true;\n      \n      try {\n        // Submit feedback to API\n        const response = await axios.post('/api/chat/feedback', {\n          message_id: this.message.id,\n          rating: this.feedbackRating,\n          feedback_text: this.feedbackText\n        });\n        \n        // Update state\n        this.feedbackSubmitted = true;\n        \n        // Emit event for parent components\n        this.$emit('feedback-submitted', {\n          messageId: this.message.id,\n          rating: this.feedbackRating,\n          feedbackText: this.feedbackText,\n          feedbackId: response.data.id\n        });\n        \n        // Update store if needed (you may need to add this action to your store)\n        if (this.$store && this.$store.dispatch) {\n          this.$store.dispatch('chat/updateMessageFeedback', {\n            messageId: this.message.id,\n            feedback: {\n              rating: this.feedbackRating,\n              feedbackText: this.feedbackText,\n              feedbackId: response.data.id\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error submitting feedback:', error);\n        // Show error notification\n        if (this.$store && this.$store.dispatch) {\n          this.$store.dispatch('showNotification', {\n            type: 'error',\n            message: 'Failed to submit feedback. Please try again.'\n          });\n        }\n      } finally {\n        this.submittingFeedback = false;\n      }\n    }\n  },\n  // Phase 7: Set feedback from props if exists\n  created() {\n    if (this.existingFeedback) {\n      this.feedbackRating = this.existingFeedback.rating;\n      this.feedbackText = this.existingFeedback.feedback_text;\n      this.feedbackSubmitted = true;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-message {\n  display: flex;\n  margin-bottom: 16px;\n  align-items: flex-start;\n}\n\n.chat-message__avatar {\n  margin-right: 12px;\n  flex-shrink: 0;\n}\n\n.chat-message__content {\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  padding: 10px 12px;\n  max-width: 80%;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.chat-message--user .chat-message__content {\n  background-color: #e3f2fd;\n}\n\n.chat-message__name {\n  font-weight: 500;\n  font-size: 0.8rem;\n  margin-bottom: 4px;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.chat-message__text {\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.chat-message__time {\n  font-size: 0.7rem;\n  color: rgba(0, 0, 0, 0.4);\n  text-align: right;\n  margin-top: 4px;\n}\n\n/* Phase 7: Feedback styles */\n.chat-message__feedback {\n  margin-top: 4px;\n}\n\n.chat-message__feedback-submitted {\n  margin-top: 4px;\n}\n\n/* Dark theme adjustments */\n.theme--dark .chat-message__content {\n  background-color: #424242;\n}\n\n.theme--dark .chat-message--user .chat-message__content {\n  background-color: #1976d2;\n}\n\n.theme--dark .chat-message__name {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.theme--dark .chat-message__time {\n  color: rgba(255, 255, 255, 0.5);\n}\n</style>\n","<template>\n  <div class=\"chat-input\">\n    <v-form @submit.prevent=\"sendMessage\" ref=\"form\">\n      <v-text-field\n        v-model=\"message\"\n        placeholder=\"Type a message...\"\n        outlined\n        dense\n        hide-details\n        autocomplete=\"off\"\n        @keydown.enter.prevent=\"sendMessage\"\n        @keydown=\"handleKeyDown\"\n        class=\"chat-input-field\"\n        :disabled=\"loading\"\n        ref=\"inputField\"\n      >\n        <template v-slot:prepend-inner>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-btn\n                icon\n                x-small\n                v-bind=\"attrs\"\n                v-on=\"on\"\n                @click=\"showCommandsList = !showCommandsList\"\n                class=\"mt-1\"\n              >\n                <v-icon small>mdi-slash-forward</v-icon>\n              </v-btn>\n            </template>\n            <span>Command shortcuts</span>\n          </v-tooltip>\n        </template>\n        \n        <template v-slot:append>\n          <v-btn\n            icon\n            color=\"primary\"\n            @click=\"sendMessage\"\n            :disabled=\"!message.trim() || loading\"\n            :loading=\"loading\"\n          >\n            <v-icon>mdi-send</v-icon>\n          </v-btn>\n        </template>\n      </v-text-field>\n    </v-form>\n    \n    <!-- Command Shortcuts Menu -->\n    <v-menu\n      v-model=\"showCommandsList\"\n      :close-on-content-click=\"true\"\n      :nudge-width=\"200\"\n      offset-y\n      content-class=\"command-shortcuts-menu\"\n    >\n      <v-card>\n        <v-list dense>\n          <v-subheader>Command Shortcuts</v-subheader>\n          <v-list-item\n            v-for=\"shortcut in commandShortcuts\"\n            :key=\"shortcut.id\"\n            @click=\"useCommandShortcut(shortcut)\"\n            dense\n          >\n            <v-list-item-content>\n              <v-list-item-title class=\"text-body-2\">\n                /{{ shortcut.command }}\n              </v-list-item-title>\n              <v-list-item-subtitle class=\"text-caption\">\n                {{ shortcut.description }}\n              </v-list-item-subtitle>\n            </v-list-item-content>\n          </v-list-item>\n          \n          <v-list-item v-if=\"!commandShortcuts || commandShortcuts.length === 0\">\n            <v-list-item-content>\n              <v-list-item-subtitle class=\"text-center\">\n                No command shortcuts available\n              </v-list-item-subtitle>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-card>\n    </v-menu>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ChatInput',\n  props: {\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    commandShortcuts: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      message: '',\n      showCommandsList: false\n    }\n  },\n  methods: {\n    sendMessage() {\n      if (this.loading) return;\n      \n      const trimmedMessage = this.message.trim();\n      if (trimmedMessage) {\n        this.$emit('send', {\n          type: 'user',\n          text: trimmedMessage,\n          timestamp: new Date().toISOString()\n        });\n        this.message = '';\n      }\n    },\n    \n    // Phase 7: Set input text programmatically (for command shortcuts)\n    setInputText(text) {\n      this.message = text;\n      // Focus the input field\n      this.$nextTick(() => {\n        if (this.$refs.inputField) {\n          this.$refs.inputField.focus();\n        }\n      });\n    },\n    \n    // Phase 7: Handle keyboard shortcuts and command expansion\n    handleKeyDown(event) {\n      // Check for slash command\n      if (event.key === '/' && this.message === '') {\n        this.showCommandsList = true;\n      }\n      \n      // Check if we need to auto-expand a command\n      const commandMatch = this.message.match(/^\\/(\\w+)$/);\n      if (commandMatch && event.key === ' ') {\n        const command = commandMatch[1];\n        const shortcut = this.commandShortcuts.find(s => s.command === command);\n        if (shortcut) {\n          // Prevent space from being added\n          event.preventDefault();\n          \n          // Expand command\n          this.useCommandShortcut(shortcut);\n        }\n      }\n    },\n    \n    // Phase 7: Use a command shortcut\n    useCommandShortcut(shortcut) {\n      // Replace input text with shortcut template\n      this.setInputText(shortcut.template);\n      \n      // Close menu\n      this.showCommandsList = false;\n      \n      // Emit event\n      this.$emit('use-shortcut', shortcut);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-input {\n  padding: 12px;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  position: relative;\n}\n\n.theme--dark .chat-input {\n  background-color: #1e1e1e;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.chat-input-field {\n  border-radius: 20px;\n}\n\n/* Command shortcuts menu styling */\n.command-shortcuts-menu {\n  max-height: 300px;\n  overflow-y: auto;\n}\n</style>\n","<template>\n  <div class=\"chat-preferences\">\n    <v-card outlined class=\"mb-4\">\n      <v-card-title class=\"text-subtitle-1\">\n        <v-icon left small>mdi-cog</v-icon>\n        AI Assistant Preferences\n      </v-card-title>\n      \n      <v-divider></v-divider>\n      \n      <v-card-text>\n        <v-form ref=\"form\">\n          <!-- Response Style -->\n          <div class=\"mb-3\">\n            <div class=\"text-subtitle-2 mb-1\">Response Style</div>\n            <v-radio-group\n              v-model=\"preferences.response_style\"\n              hide-details\n              dense\n              row\n              @change=\"savePreferences\"\n            >\n              <v-radio\n                label=\"Technical\"\n                value=\"technical\"\n                dense\n              ></v-radio>\n              <v-radio\n                label=\"Balanced\"\n                value=\"balanced\"\n                dense\n              ></v-radio>\n              <v-radio\n                label=\"Simple\"\n                value=\"simple\"\n                dense\n              ></v-radio>\n            </v-radio-group>\n          </div>\n          \n          <!-- Auto Suggestions -->\n          <div class=\"mb-3\">\n            <v-switch\n              v-model=\"preferences.auto_suggestions\"\n              label=\"Show automatic suggestions\"\n              hide-details\n              dense\n              @change=\"savePreferences\"\n            ></v-switch>\n          </div>\n          \n          <!-- Preferred Topics -->\n          <div class=\"mb-3\">\n            <div class=\"text-subtitle-2 mb-1\">Preferred Topics</div>\n            <v-combobox\n              v-model=\"preferences.preferred_topics\"\n              :items=\"availableTopics\"\n              chips\n              multiple\n              small-chips\n              dense\n              hide-details\n              placeholder=\"Select or type topics you're interested in\"\n              @change=\"savePreferences\"\n            ></v-combobox>\n          </div>\n          \n          <!-- Avoided Topics -->\n          <div class=\"mb-3\">\n            <div class=\"text-subtitle-2 mb-1\">Avoided Topics</div>\n            <v-combobox\n              v-model=\"preferences.avoided_topics\"\n              :items=\"availableTopics\"\n              chips\n              multiple\n              small-chips\n              dense\n              hide-details\n              placeholder=\"Select or type topics you want to avoid\"\n              @change=\"savePreferences\"\n            ></v-combobox>\n          </div>\n        </v-form>\n      </v-card-text>\n      \n      <!-- Feedback Statistics (Read-only) -->\n      <v-divider></v-divider>\n      \n      <v-card-title class=\"text-subtitle-1 pt-3\">\n        <v-icon left small>mdi-chart-bar</v-icon>\n        Feedback Summary\n      </v-card-title>\n      \n      <v-card-text>\n        <div class=\"d-flex justify-space-between mb-2\">\n          <span class=\"text-body-2\">Positive Feedback:</span>\n          <span class=\"text-body-2\">{{ positiveFeedbackCount }}</span>\n        </div>\n        <div class=\"d-flex justify-space-between mb-2\">\n          <span class=\"text-body-2\">Negative Feedback:</span>\n          <span class=\"text-body-2\">{{ negativeFeedbackCount }}</span>\n        </div>\n        <div class=\"d-flex justify-space-between mb-2\">\n          <span class=\"text-body-2\">Last Feedback:</span>\n          <span class=\"text-body-2\">{{ formattedLastFeedbackTime }}</span>\n        </div>\n        \n        <!-- Top Rated Topics -->\n        <div class=\"mt-4\" v-if=\"topRatedTopics.length > 0\">\n          <div class=\"text-subtitle-2 mb-2\">Top Rated Topics</div>\n          <v-chip\n            v-for=\"topic in topRatedTopics\"\n            :key=\"topic.name\"\n            class=\"mr-2 mb-2\"\n            x-small\n            :color=\"getTopicColor(topic.avgRating)\"\n            text-color=\"white\"\n          >\n            {{ topic.name }} ({{ topic.avgRating.toFixed(1) }})\n          </v-chip>\n        </div>\n      </v-card-text>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\n\nexport default {\n  name: 'ChatPreferences',\n  \n  data() {\n    return {\n      // Default topics\n      availableTopics: [\n        'containers', \n        'images', \n        'volumes', \n        'networks', \n        'security', \n        'troubleshooting',\n        'backup',\n        'configuration'\n      ],\n      // Local copy of preferences for editing\n      preferences: {\n        response_style: 'balanced',\n        auto_suggestions: true,\n        preferred_topics: [],\n        avoided_topics: []\n      },\n      saving: false\n    };\n  },\n  \n  computed: {\n    ...mapState('chat', ['userPreferences']),\n    \n    // Feedback statistics\n    positiveFeedbackCount() {\n      return this.userPreferences?.feedback_preferences?.positively_rated_responses || 0;\n    },\n    \n    negativeFeedbackCount() {\n      return this.userPreferences?.feedback_preferences?.negatively_rated_responses || 0;\n    },\n    \n    formattedLastFeedbackTime() {\n      const lastTime = this.userPreferences?.feedback_preferences?.last_feedback_time;\n      if (!lastTime) return 'None';\n      \n      try {\n        const date = new Date(lastTime);\n        return date.toLocaleString();\n      } catch (e) {\n        return 'Invalid date';\n      }\n    },\n    \n    // Extract top rated topics\n    topRatedTopics() {\n      const topicRatings = this.userPreferences?.feedback_preferences?.topic_ratings || {};\n      \n      // Convert to array and sort by average rating\n      return Object.entries(topicRatings)\n        .map(([name, data]) => ({\n          name,\n          count: data.count,\n          avgRating: data.avg_rating\n        }))\n        .filter(topic => topic.count >= 2) // Only include topics with multiple ratings\n        .sort((a, b) => b.avgRating - a.avgRating)\n        .slice(0, 5); // Top 5\n    }\n  },\n  \n  methods: {\n    ...mapActions('chat', ['updateUserPreferences']),\n    \n    // Save preferences to store and API\n    async savePreferences() {\n      if (this.saving) return;\n      \n      this.saving = true;\n      \n      try {\n        await this.updateUserPreferences(this.preferences);\n        \n        // Show success notification\n        this.$emit('notification', {\n          type: 'success',\n          message: 'Preferences saved successfully'\n        });\n      } catch (error) {\n        console.error('Error saving preferences:', error);\n        \n        // Show error notification\n        this.$emit('notification', {\n          type: 'error',\n          message: 'Failed to save preferences'\n        });\n        \n        // Reset to stored preferences\n        this.preferences = { ...this.userPreferences };\n      } finally {\n        this.saving = false;\n      }\n    },\n    \n    // Get color for topic chip based on rating\n    getTopicColor(rating) {\n      if (rating >= 4.5) return 'green darken-1';\n      if (rating >= 4.0) return 'green';\n      if (rating >= 3.5) return 'lime darken-2';\n      if (rating >= 3.0) return 'orange';\n      if (rating >= 2.5) return 'amber darken-2';\n      return 'red';\n    }\n  },\n  \n  watch: {\n    // Update local preferences when store changes\n    userPreferences: {\n      handler(newVal) {\n        if (newVal) {\n          this.preferences = {\n            response_style: newVal.response_style || 'balanced',\n            auto_suggestions: newVal.auto_suggestions !== undefined ? newVal.auto_suggestions : true,\n            preferred_topics: [...(newVal.preferred_topics || [])],\n            avoided_topics: [...(newVal.avoided_topics || [])]\n          };\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-preferences {\n  margin-bottom: 16px;\n}\n</style>\n","<template>\n  <v-navigation-drawer\n    v-model=\"localValue\"\n    app\n    right\n    width=\"350\"\n    class=\"chat-sidebar\"\n    temporary\n  >\n    <v-app-bar flat dark color=\"primary\" class=\"chat-sidebar-header\">\n      <v-menu offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn\n            text\n            v-bind=\"attrs\"\n            v-on=\"on\"\n            class=\"text-none px-1\"\n          >\n            <span class=\"text-truncate\" style=\"max-width: 180px\">{{ sessionTitle }}</span>\n            <v-icon right>mdi-chevron-down</v-icon>\n          </v-btn>\n        </template>\n        <v-list>\n          <v-list-item @click=\"newSession\">\n            <v-list-item-icon>\n              <v-icon>mdi-plus</v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>New Chat</v-list-item-title>\n          </v-list-item>\n          <v-divider v-if=\"sessions.length > 0\"></v-divider>\n          <v-list-item\n            v-for=\"session in sessions\"\n            :key=\"session.id\"\n            @click=\"switchSession(session.id)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-if=\"currentSession && session.id === currentSession.id\">\n                mdi-check\n              </v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ session.title }}</v-list-item-title>\n            <v-list-item-action v-if=\"sessions.length > 1\">\n              <v-btn\n                icon\n                small\n                @click.stop=\"confirmDeleteSession(session)\"\n              >\n                <v-icon small>mdi-delete-outline</v-icon>\n              </v-btn>\n            </v-list-item-action>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n      <v-spacer></v-spacer>\n      <v-btn icon @click=\"clearChat\">\n        <v-icon>mdi-broom</v-icon>\n      </v-btn>\n      <v-btn icon @click=\"$emit('input', false)\">\n        <v-icon>mdi-close</v-icon>\n      </v-btn>\n    </v-app-bar>\n\n    <!-- Phase 7: Add tabs for conversation and settings -->\n    <v-tabs\n      v-model=\"activeTab\"\n      grow\n      background-color=\"primary\"\n      dark\n    >\n      <v-tab>\n        <v-icon small class=\"mr-1\">mdi-chat</v-icon>\n        Chat\n      </v-tab>\n      <v-tab>\n        <v-icon small class=\"mr-1\">mdi-lightning-bolt</v-icon>\n        Commands\n      </v-tab>\n      <v-tab>\n        <v-icon small class=\"mr-1\">mdi-cog</v-icon>\n        Preferences\n      </v-tab>\n    </v-tabs>\n\n    <v-tabs-items v-model=\"activeTab\" class=\"flex-grow-1 d-flex flex-column\">\n      <!-- Chat Tab -->\n      <v-tab-item class=\"flex-grow-1 d-flex flex-column\">\n        <v-container fluid class=\"chat-messages-container pa-0 flex-grow-1\">\n          <div class=\"chat-messages\" ref=\"chatMessages\">\n            <div v-if=\"messages.length === 0\" class=\"chat-empty-state\">\n              <v-icon size=\"64\" color=\"grey lighten-1\">mdi-chat-outline</v-icon>\n              <p class=\"text-center grey--text text--darken-1 mt-4\">\n                Ask me anything about Docker or your containers\n              </p>\n            </div>\n            <chat-message\n              v-for=\"(message, index) in messages\"\n              :key=\"index\"\n              :message=\"message\"\n              :existing-feedback=\"getFeedbackForMessage(message.id)\"\n              class=\"px-4\"\n              @feedback-submitted=\"handleFeedbackSubmitted\"\n            />\n          </div>\n        </v-container>\n        \n        <div v-if=\"suggestions.length > 0\" class=\"suggestions-container px-2 py-2\">\n          <div class=\"d-flex flex-wrap\">\n            <v-chip\n              v-for=\"(suggestion, i) in suggestions\"\n              :key=\"i\"\n              class=\"ma-1\"\n              outlined\n              small\n              @click=\"handleSuggestionClick(suggestion)\"\n            >\n              {{ suggestion }}\n            </v-chip>\n          </div>\n        </div>\n\n        <div class=\"chat-input-container\">\n          <chat-input \n            @send=\"handleSendMessage\" \n            :loading=\"isLoading\" \n            :command-shortcuts=\"commandShortcuts\"\n          />\n        </div>\n      </v-tab-item>\n\n      <!-- Commands Tab -->\n      <v-tab-item>\n        <v-container class=\"pa-4 overflow-y-auto\" style=\"height: 100%\">\n          <chat-commands @use-shortcut=\"handleShortcutUse\" @notification=\"showNotification\" />\n        </v-container>\n      </v-tab-item>\n\n      <!-- Preferences Tab -->\n      <v-tab-item>\n        <v-container class=\"pa-4 overflow-y-auto\" style=\"height: 100%\">\n          <chat-preferences @notification=\"showNotification\" />\n        </v-container>\n      </v-tab-item>\n    </v-tabs-items>\n\n\n    <!-- Delete session confirmation dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"300\">\n      <v-card>\n        <v-card-title class=\"headline\">Delete Chat Session</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete this chat session? This action cannot be undone.\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn text @click=\"deleteDialog = false\">Cancel</v-btn>\n          <v-btn \n            color=\"error\" \n            text \n            @click=\"deleteSession(sessionToDelete.id)\"\n          >\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-navigation-drawer>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions } from 'vuex';\nimport ChatMessage from './ChatMessage.vue';\nimport ChatInput from './ChatInput.vue';\nimport ChatCommands from './ChatCommands.vue';\nimport ChatPreferences from './ChatPreferences.vue';\n\nexport default {\n  name: 'ChatSidebar',\n  components: {\n    ChatMessage,\n    ChatInput,\n    ChatCommands,\n    ChatPreferences\n  },\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      deleteDialog: false,\n      sessionToDelete: null,\n      activeTab: 0,\n      snackbar: {\n        show: false,\n        text: '',\n        color: 'info'\n      }\n    }\n  },\n  computed: {\n    ...mapGetters('chat', [\n      'messages', \n      'isLoading', \n      'error', \n      'suggestions', \n      'currentSession',\n      'sessions',\n      'getFeedbackForMessage',\n      'commandShortcuts'\n    ]),\n    localValue: {\n      get() {\n        return this.value || this.$store.getters['chat/isActive'];\n      },\n      set(value) {\n        this.$emit('input', value);\n        this.$store.commit('chat/SET_ACTIVE', value);\n      }\n    },\n    sessionTitle() {\n      return this.currentSession?.title || 'New Chat';\n    }\n  },\n  methods: {\n    ...mapActions('chat', [\n      'sendMessage', \n      'clearChat', \n      'createSession', \n      'loadSession', \n      'loadSessions',\n      'switchSession',\n      'deleteSession',\n      'submitMessageFeedback',\n      'updateMessageFeedback',\n      'useCommandShortcut'\n    ]),\n    handleSendMessage(message) {\n      this.sendMessage(message.text);\n      this.scrollToBottom();\n    },\n    handleSuggestionClick(suggestion) {\n      this.sendMessage(suggestion);\n      this.scrollToBottom();\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        if (this.$refs.chatMessages) {\n          this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n        }\n      });\n    },\n    async newSession() {\n      try {\n        await this.createSession();\n        await this.loadSessions();\n        this.scrollToBottom();\n      } catch (error) {\n        console.error('Error creating new session:', error);\n      }\n    },\n    confirmDeleteSession(session) {\n      this.sessionToDelete = session;\n      this.deleteDialog = true;\n    },\n    \n    // Phase 7: Handle feedback submitted from ChatMessage component\n    handleFeedbackSubmitted(feedbackData) {\n      // Update store with feedback\n      this.updateMessageFeedback({\n        messageId: feedbackData.messageId,\n        feedback: {\n          id: feedbackData.feedbackId,\n          rating: feedbackData.rating,\n          feedback_text: feedbackData.feedbackText\n        }\n      });\n      \n      // Show notification\n      this.showNotification({\n        type: 'success',\n        message: 'Thank you for your feedback!'\n      });\n    },\n    \n    // Phase 7: Handle shortcut use\n    async handleShortcutUse(shortcut) {\n      try {\n        // Switch to chat tab\n        this.activeTab = 0;\n        \n        // Get template from API\n        const result = await this.useCommandShortcut(shortcut.command);\n        \n        // Insert template into input\n        // Note: This will require adding a method to ChatInput component\n        if (this.$refs.chatInput) {\n          this.$refs.chatInput.setInputText(result.template);\n        } else {\n          // Fallback: Send message directly\n          this.sendMessage(result.template);\n        }\n      } catch (error) {\n        console.error('Error using command shortcut:', error);\n        this.showNotification({\n          type: 'error',\n          message: 'Failed to use command shortcut'\n        });\n      }\n    },\n    \n    // Phase 7: Show notification message\n    showNotification({ type, message }) {\n      this.snackbar = {\n        show: true,\n        text: message,\n        color: type === 'error' ? 'error' : 'success'\n      };\n      \n      // Auto-hide after 3 seconds\n      setTimeout(() => {\n        this.snackbar.show = false;\n      }, 3000);\n    }\n  },\n  watch: {\n    messages() {\n      this.scrollToBottom();\n    },\n    value(newValue) {\n      if (newValue) {\n        // When sidebar is opened, scroll to bottom of messages\n        this.scrollToBottom();\n      }\n    }\n  },\n  mounted() {\n    // Initialize the chat module\n    this.$store.dispatch('chat/init');\n    \n    // When component is mounted, check if sidebar should be open\n    if (this.$store.getters['chat/isActive']) {\n      this.$emit('input', true);\n    }\n    \n    this.scrollToBottom();\n  }\n};\n</script>\n\n<style scoped>\n.chat-sidebar {\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-messages-container {\n  flex: 1;\n  overflow: hidden;\n  position: relative;\n}\n\n.chat-messages {\n  height: 100%;\n  overflow-y: auto;\n  padding-top: 16px;\n  padding-bottom: 16px;\n}\n\n.chat-empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  padding: 24px;\n}\n\n.suggestions-container {\n  border-top: 1px solid rgba(0, 0, 0, 0.12);\n  background-color: #f5f5f5;\n}\n\n.theme--dark .suggestions-container {\n  border-top: 1px solid rgba(255, 255, 255, 0.12);\n  background-color: #424242;\n}\n\n.chat-input-container {\n  position: relative;\n  z-index: 1;\n}\n\n/* Scrollbar styling */\n.chat-messages::-webkit-scrollbar {\n  width: 6px;\n}\n\n.chat-messages::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.chat-messages::-webkit-scrollbar-thumb {\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n}\n\n.theme--dark .chat-messages::-webkit-scrollbar-thumb {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n</style>\n","<template>\n  <div class=\"dashboard\">\n    <h1 class=\"text-h4 mb-4\">Dashboard</h1>\n\n    <v-row>\n      <!-- System Overview -->\n      <v-col cols=\"12\" md=\"6\">\n        <v-card class=\"mb-4\">\n          <v-card-title>\n            <v-icon left>mdi-server</v-icon>\n            System Overview\n          </v-card-title>\n          <v-card-text>\n            <v-row>\n              <v-col cols=\"6\">\n                <div class=\"text-subtitle-1\">Docker Version</div>\n                <div class=\"text-body-1\">20.10.23</div>\n              </v-col>\n              <v-col cols=\"6\">\n                <div class=\"text-subtitle-1\">API Version</div>\n                <div class=\"text-body-1\">1.41</div>\n              </v-col>\n              <v-col cols=\"6\">\n                <div class=\"text-subtitle-1\">OS/Arch</div>\n                <div class=\"text-body-1\">linux/amd64</div>\n              </v-col>\n              <v-col cols=\"6\">\n                <div class=\"text-subtitle-1\">Kernel Version</div>\n                <div class=\"text-body-1\">5.15.0-76-generic</div>\n              </v-col>\n            </v-row>\n          </v-card-text>\n        </v-card>\n      </v-col>\n\n      <!-- Resource Usage -->\n      <v-col cols=\"12\" md=\"6\">\n        <v-card class=\"mb-4\">\n          <v-card-title>\n            <v-icon left>mdi-chart-line</v-icon>\n            Resource Usage\n          </v-card-title>\n          <v-card-text>\n            <div class=\"mb-2\">\n              <div class=\"d-flex justify-space-between align-center\">\n                <span>CPU Usage</span>\n                <span>45%</span>\n              </div>\n              <v-progress-linear\n                color=\"primary\"\n                height=\"10\"\n                rounded\n                value=\"45\"\n              ></v-progress-linear>\n            </div>\n            <div class=\"mb-2\">\n              <div class=\"d-flex justify-space-between align-center\">\n                <span>Memory Usage</span>\n                <span>2.1 GB / 8 GB</span>\n              </div>\n              <v-progress-linear\n                color=\"info\"\n                height=\"10\"\n                rounded\n                value=\"26\"\n              ></v-progress-linear>\n            </div>\n            <div>\n              <div class=\"d-flex justify-space-between align-center\">\n                <span>Disk Usage</span>\n                <span>15.4 GB / 50 GB</span>\n              </div>\n              <v-progress-linear\n                color=\"success\"\n                height=\"10\"\n                rounded\n                value=\"31\"\n              ></v-progress-linear>\n            </div>\n          </v-card-text>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- Container Status -->\n      <v-col cols=\"12\" md=\"6\">\n        <v-card class=\"mb-4\">\n          <v-card-title>\n            <v-icon left>mdi-docker</v-icon>\n            Container Status\n          </v-card-title>\n          <v-card-text>\n            <v-row>\n              <v-col cols=\"4\" class=\"text-center\">\n                <v-avatar color=\"success\" size=\"48\" class=\"mb-2\">\n                  <span class=\"text-h6 white--text\">5</span>\n                </v-avatar>\n                <div>Running</div>\n              </v-col>\n              <v-col cols=\"4\" class=\"text-center\">\n                <v-avatar color=\"warning\" size=\"48\" class=\"mb-2\">\n                  <span class=\"text-h6 white--text\">2</span>\n                </v-avatar>\n                <div>Paused</div>\n              </v-col>\n              <v-col cols=\"4\" class=\"text-center\">\n                <v-avatar color=\"error\" size=\"48\" class=\"mb-2\">\n                  <span class=\"text-h6 white--text\">3</span>\n                </v-avatar>\n                <div>Stopped</div>\n              </v-col>\n            </v-row>\n            <v-btn\n              color=\"primary\"\n              block\n              class=\"mt-4\"\n              to=\"/containers\"\n              >View All Containers</v-btn\n            >\n          </v-card-text>\n        </v-card>\n      </v-col>\n\n      <!-- Recent Activity -->\n      <v-col cols=\"12\" md=\"6\">\n        <v-card class=\"mb-4\">\n          <v-card-title>\n            <v-icon left>mdi-history</v-icon>\n            Recent Activity\n          </v-card-title>\n          <v-list dense>\n            <v-list-item v-for=\"(activity, i) in recentActivities\" :key=\"i\">\n              <v-list-item-icon>\n                <v-icon :color=\"activity.color\">{{ activity.icon }}</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>{{ activity.title }}</v-list-item-title>\n                <v-list-item-subtitle>{{ activity.time }}</v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <!-- Quick Actions -->\n      <v-col cols=\"12\">\n        <v-card>\n          <v-card-title>\n            <v-icon left>mdi-lightning-bolt</v-icon>\n            Quick Actions\n          </v-card-title>\n          <v-card-text>\n            <v-row>\n              <v-col cols=\"6\" sm=\"3\">\n                <v-btn block color=\"primary\" to=\"/containers/create\">\n                  <v-icon left>mdi-plus</v-icon>\n                  New Container\n                </v-btn>\n              </v-col>\n              <v-col cols=\"6\" sm=\"3\">\n                <v-btn block color=\"info\" to=\"/images/pull\">\n                  <v-icon left>mdi-download</v-icon>\n                  Pull Image\n                </v-btn>\n              </v-col>\n              <v-col cols=\"6\" sm=\"3\">\n                <v-btn block color=\"success\" to=\"/backup/create\">\n                  <v-icon left>mdi-backup-restore</v-icon>\n                  Create Backup\n                </v-btn>\n              </v-col>\n              <v-col cols=\"6\" sm=\"3\">\n                <v-btn block color=\"warning\" to=\"/security/scan\">\n                  <v-icon left>mdi-shield-search</v-icon>\n                  Security Scan\n                </v-btn>\n              </v-col>\n            </v-row>\n          </v-card-text>\n        </v-card>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      recentActivities: [\n        {\n          icon: 'mdi-play',\n          color: 'success',\n          title: 'Container nginx started',\n          time: '5 minutes ago',\n        },\n        {\n          icon: 'mdi-stop',\n          color: 'error',\n          title: 'Container redis stopped',\n          time: '10 minutes ago',\n        },\n        {\n          icon: 'mdi-download',\n          color: 'info',\n          title: 'Image postgres:latest pulled',\n          time: '15 minutes ago',\n        },\n        {\n          icon: 'mdi-shield',\n          color: 'warning',\n          title: 'Security scan completed',\n          time: '30 minutes ago',\n        },\n        {\n          icon: 'mdi-backup-restore',\n          color: 'success',\n          title: 'Backup created',\n          time: '1 hour ago',\n        },\n      ],\n    };\n  },\n};\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 16px;\n}\n</style>\n"],"names":[],"sourceRoot":""}