{"version":3,"file":"css/0.3110dcc8.css","mappings":"AA4UA,6BACE,WACF","sources":["webpack://dockerforge-web-ui/./src/views/images/ImageList.vue"],"sourcesContent":["<template>\n  <div class=\"image-list\">\n    <v-container fluid>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-card>\n            <v-card-title>\n              Docker Images\n              <v-spacer></v-spacer>\n              <v-text-field\n                v-model=\"search\"\n                append-icon=\"mdi-magnify\"\n                label=\"Search\"\n                single-line\n                hide-details\n                class=\"mx-4\"\n              ></v-text-field>\n              <v-btn color=\"primary\" @click=\"openPullDialog\">\n                <v-icon left>mdi-cloud-download</v-icon>\n                Pull Image\n              </v-btn>\n            </v-card-title>\n            <v-data-table\n              :headers=\"headers\"\n              :items=\"images\"\n              :search=\"search\"\n              :loading=\"loading\"\n              :items-per-page=\"10\"\n              :footer-props=\"{\n                'items-per-page-options': [5, 10, 15, 20, 50],\n              }\"\n              class=\"elevation-1\"\n            >\n              <template v-slot:item.tags=\"{ item }\">\n                <v-chip\n                  v-for=\"tag in item.tags\"\n                  :key=\"tag\"\n                  class=\"ma-1\"\n                  small\n                  color=\"primary\"\n                  text-color=\"white\"\n                >\n                  {{ tag }}\n                </v-chip>\n              </template>\n              <template v-slot:item.size=\"{ item }\">\n                {{ formatSize(item.size) }}\n              </template>\n              <template v-slot:item.created_at=\"{ item }\">\n                {{ formatDate(item.created_at) }}\n              </template>\n              <template v-slot:item.actions=\"{ item }\">\n                <v-btn icon small @click=\"viewImageDetails(item)\">\n                  <v-icon small>mdi-eye</v-icon>\n                </v-btn>\n                <v-btn icon small @click=\"scanImage(item)\">\n                  <v-icon small>mdi-shield-search</v-icon>\n                </v-btn>\n                <v-btn icon small @click=\"confirmDeleteImage(item)\">\n                  <v-icon small color=\"error\">mdi-delete</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-row>\n    </v-container>\n\n    <!-- Pull Image Dialog -->\n    <v-dialog v-model=\"pullDialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title>Pull Docker Image</v-card-title>\n        <v-card-text>\n          <v-form ref=\"pullForm\" v-model=\"validPullForm\" lazy-validation>\n            <v-text-field\n              v-model=\"newImage.name\"\n              label=\"Image Name\"\n              :rules=\"[v => !!v || 'Image name is required']\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newImage.tag\"\n              label=\"Tag\"\n              hint=\"Leave empty for 'latest'\"\n            ></v-text-field>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" text @click=\"closePullDialog\">Cancel</v-btn>\n          <v-btn\n            color=\"blue darken-1\"\n            text\n            @click=\"pullImage\"\n            :loading=\"pulling\"\n            :disabled=\"!validPullForm || pulling\"\n          >\n            Pull\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Delete Confirmation Dialog -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title>Delete Image</v-card-title>\n        <v-card-text>\n          Are you sure you want to delete this image?\n          <div class=\"mt-2\">\n            <strong>ID:</strong> {{ selectedImage?.id }}\n          </div>\n          <div v-if=\"selectedImage?.tags && selectedImage.tags.length > 0\">\n            <strong>Tags:</strong>\n            <v-chip\n              v-for=\"tag in selectedImage.tags\"\n              :key=\"tag\"\n              class=\"ma-1\"\n              small\n              color=\"primary\"\n              text-color=\"white\"\n            >\n              {{ tag }}\n            </v-chip>\n          </div>\n          <v-checkbox\n            v-model=\"forceDelete\"\n            label=\"Force delete (remove even if used by containers)\"\n            class=\"mt-4\"\n          ></v-checkbox>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" text @click=\"closeDeleteDialog\">Cancel</v-btn>\n          <v-btn\n            color=\"red darken-1\"\n            text\n            @click=\"deleteImage\"\n            :loading=\"deleting\"\n            :disabled=\"deleting\"\n          >\n            Delete\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Snackbar for notifications -->\n    <v-snackbar v-model=\"snackbar\" :color=\"snackbarColor\" :timeout=\"3000\">\n      {{ snackbarText }}\n      <template v-slot:action=\"{ attrs }\">\n        <v-btn text v-bind=\"attrs\" @click=\"snackbar = false\">Close</v-btn>\n      </template>\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\nimport { format, parseISO } from 'date-fns';\n\nexport default {\n  name: 'ImageList',\n  \n  data() {\n    return {\n      search: '',\n      headers: [\n        { text: 'ID', value: 'short_id' },\n        { text: 'Tags', value: 'tags' },\n        { text: 'Size', value: 'size' },\n        { text: 'Created', value: 'created_at' },\n        { text: 'Actions', value: 'actions', sortable: false },\n      ],\n      loading: false,\n      pullDialog: false,\n      deleteDialog: false,\n      validPullForm: true,\n      newImage: {\n        name: '',\n        tag: '',\n      },\n      selectedImage: null,\n      pulling: false,\n      deleting: false,\n      forceDelete: false,\n      snackbar: false,\n      snackbarText: '',\n      snackbarColor: 'success',\n    };\n  },\n  \n  computed: {\n    ...mapState('images', ['images']),\n  },\n  \n  created() {\n    this.fetchImages();\n  },\n  \n  methods: {\n    ...mapActions('images', ['getImages', 'pullImage', 'removeImage', 'scanImageVulnerabilities']),\n    \n    async fetchImages() {\n      this.loading = true;\n      try {\n        await this.getImages();\n      } catch (error) {\n        this.showError('Failed to fetch images: ' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    formatSize(size) {\n      if (!size) return 'Unknown';\n      \n      const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n      let formattedSize = size;\n      let unitIndex = 0;\n      \n      while (formattedSize >= 1024 && unitIndex < units.length - 1) {\n        formattedSize /= 1024;\n        unitIndex++;\n      }\n      \n      return `${formattedSize.toFixed(2)} ${units[unitIndex]}`;\n    },\n    \n    formatDate(dateString) {\n      if (!dateString) return 'Unknown';\n      try {\n        return format(parseISO(dateString), 'MMM d, yyyy HH:mm');\n      } catch (error) {\n        return dateString;\n      }\n    },\n    \n    openPullDialog() {\n      this.pullDialog = true;\n      this.newImage = {\n        name: '',\n        tag: '',\n      };\n      if (this.$refs.pullForm) {\n        this.$refs.pullForm.resetValidation();\n      }\n    },\n    \n    closePullDialog() {\n      this.pullDialog = false;\n    },\n    \n    async pullImage() {\n      if (!this.$refs.pullForm.validate()) return;\n      \n      this.pulling = true;\n      try {\n        await this.pullImage({\n          name: this.newImage.name,\n          tag: this.newImage.tag || 'latest',\n        });\n        this.closePullDialog();\n        this.showSuccess('Image pulled successfully');\n        this.fetchImages();\n      } catch (error) {\n        this.showError('Failed to pull image: ' + error.message);\n      } finally {\n        this.pulling = false;\n      }\n    },\n    \n    confirmDeleteImage(image) {\n      this.selectedImage = image;\n      this.deleteDialog = true;\n      this.forceDelete = false;\n    },\n    \n    closeDeleteDialog() {\n      this.deleteDialog = false;\n      this.selectedImage = null;\n    },\n    \n    async deleteImage() {\n      if (!this.selectedImage) return;\n      \n      this.deleting = true;\n      try {\n        await this.removeImage({\n          id: this.selectedImage.id,\n          force: this.forceDelete,\n        });\n        this.closeDeleteDialog();\n        this.showSuccess('Image deleted successfully');\n        this.fetchImages();\n      } catch (error) {\n        this.showError('Failed to delete image: ' + error.message);\n      } finally {\n        this.deleting = false;\n      }\n    },\n    \n    viewImageDetails(image) {\n      this.$router.push({ name: 'ImageDetail', params: { id: image.id } });\n    },\n    \n    async scanImage(image) {\n      try {\n        await this.scanImageVulnerabilities(image.id);\n        this.showSuccess('Security scan initiated');\n        this.$router.push({ name: 'ImageSecurity', params: { id: image.id } });\n      } catch (error) {\n        this.showError('Failed to scan image: ' + error.message);\n      }\n    },\n    \n    showSuccess(message) {\n      this.snackbarText = message;\n      this.snackbarColor = 'success';\n      this.snackbar = true;\n    },\n    \n    showError(message) {\n      this.snackbarText = message;\n      this.snackbarColor = 'error';\n      this.snackbar = true;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.image-list {\n  height: 100%;\n}\n</style>\n"],"names":[],"sourceRoot":""}