services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email={{acme_email}}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  app:
    image: {{app_image}}
    container_name: production-app
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://{{db_user}}:{{db_password}}@db:5432/{{db_name}}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - web
      - internal
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`{{app_domain}}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db:
    image: postgres:15-alpine
    container_name: production-db
    environment:
      - POSTGRES_USER={{db_user}}
      - POSTGRES_PASSWORD={{db_password}}
      - POSTGRES_DB={{db_name}}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{db_user}}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:alpine
    container_name: production-redis
    command: redis-server --requirepass {{redis_password}} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "{{redis_password}}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  traefik_data:
  db_data:
  redis_data:

networks:
  web:
    external: true
  internal:
    driver: bridge

metadata:
  name: production_stack
  category: production
  description: "Production-ready stack with Traefik, Node.js app, PostgreSQL, and Redis"
  difficulty: advanced
  tags:
    - production
    - traefik
    - node
    - postgres
    - redis
    - ssl
  variables:
    - acme_email
    - app_image
    - app_domain
    - db_user
    - db_password
    - db_name
    - redis_password
