name: DockerForge CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit
          pip install -e .
          
      - name: Lint with flake8
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check formatting with black
        run: |
          black --check src tests
          
      - name: Check imports with isort
        run: |
          isort --check-only --profile black src tests
          
      - name: Security check with bandit
        run: |
          bandit -r src -x tests

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .
          
      - name: Run unit tests
        run: |
          pytest tests/unit --cov=src --cov-report=xml
          
      - name: Run integration tests
        env:
          DOCKER_HOST: tcp://localhost:2375
        run: |
          pytest tests/integration
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          
      - name: Build package
        run: |
          python -m build
          
      - name: Store built package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and export Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: dockerforge:test
          outputs: type=docker,dest=/tmp/dockerforge.tar
          
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dockerforge-image
          path: /tmp/dockerforge.tar

  publish-test:
    name: Publish Test Package
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Download built package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: |
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*
          
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: dockerforge-image
          path: /tmp
          
      - name: Load Docker image
        run: |
          docker load --input /tmp/dockerforge.tar
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Tag and push Docker image
        run: |
          docker tag dockerforge:test dockerforge/dockerforge:develop
          docker push dockerforge/dockerforge:develop

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Download built package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*
          
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: dockerforge-image
          path: /tmp
          
      - name: Load Docker image
        run: |
          docker load --input /tmp/dockerforge.tar
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Tag and push Docker image
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          docker tag dockerforge:test dockerforge/dockerforge:$VERSION
          docker tag dockerforge:test dockerforge/dockerforge:latest
          docker push dockerforge/dockerforge:$VERSION
          docker push dockerforge/dockerforge:latest
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: publish-release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          
      - name: Build documentation
        run: |
          mkdocs build
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
